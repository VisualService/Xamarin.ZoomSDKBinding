using System;
using CoreGraphics;
using CoreVideo;
using Foundation;
using ObjCRuntime;
using UIKit;

namespace Zoomios
{
    // @interface MobileRTCAuthService : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCAuthService
    {
        [Wrap("WeakDelegate")]
        [NullAllowed]
        MobileRTCAuthDelegate Delegate { get; set; }

        // @property (assign, nonatomic) id<MobileRTCAuthDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // @property (retain, nonatomic) NSString * _Nullable clientKey;
        [NullAllowed, Export("clientKey", ArgumentSemantic.Retain)]
        string ClientKey { get; set; }

        // @property (retain, nonatomic) NSString * _Nullable clientSecret;
        [NullAllowed, Export("clientSecret", ArgumentSemantic.Retain)]
        string ClientSecret { get; set; }

        // @property (retain, nonatomic) NSString * _Nullable jwtToken;
        [NullAllowed, Export("jwtToken", ArgumentSemantic.Retain)]
        string JwtToken { get; set; }

        // -(void)sdkAuth;
        [Export("sdkAuth")]
        void SdkAuth();

        // -(BOOL)isLoggedIn;
        [Export("isLoggedIn")]
        bool IsLoggedIn { get; }

        // -(MobileRTCUserType)getUserType;
        [Export("getUserType")]
        MobileRTCUserType UserType { get; }

        // -(BOOL)loginWithEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password rememberMe:(BOOL)rememberMe;
        [Export("loginWithEmail:password:rememberMe:")]
        bool LoginWithEmail(string email, string password, bool rememberMe);

        // -(BOOL)loginWithSSOToken:(NSString * _Nonnull)token rememberMe:(BOOL)rememberMe;
        [Export("loginWithSSOToken:rememberMe:")]
        bool LoginWithSSOToken(string token, bool rememberMe);

        // -(BOOL)logoutRTC;
        [Export("logoutRTC")]
        bool LogoutRTC();

        // -(MobileRTCAccountInfo * _Nullable)getAccountInfo;
        [NullAllowed, Export("getAccountInfo")]
        MobileRTCAccountInfo AccountInfo { get; }
    }

    // @protocol MobileRTCAuthDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MobileRTCAuthDelegate
    {
        // @required -(void)onMobileRTCAuthReturn:(MobileRTCAuthError)returnValue;
        [Abstract]
        [Export("onMobileRTCAuthReturn:")]
        void OnMobileRTCAuthReturn(MobileRTCAuthError returnValue);

        // @optional -(void)onMobileRTCAuthExpired;
        [Export("onMobileRTCAuthExpired")]
        void OnMobileRTCAuthExpired();

        // @optional -(void)onMobileRTCLoginReturn:(NSInteger)returnValue;
        [Export("onMobileRTCLoginReturn:")]
        void OnMobileRTCLoginReturn(nint returnValue);

        // @optional -(void)onMobileRTCLogoutReturn:(NSInteger)returnValue;
        [Export("onMobileRTCLogoutReturn:")]
        void OnMobileRTCLogoutReturn(nint returnValue);
    }

    // @interface MobileRTCAccountInfo : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCAccountInfo
    {
        // -(NSString * _Nullable)getEmailAddress;
        [NullAllowed, Export("getEmailAddress")]
        string EmailAddress { get; }

        // -(NSString * _Nullable)getUserName;
        [NullAllowed, Export("getUserName")]
        string UserName { get; }

        // -(NSString * _Nullable)getPMIVanityURL;
        [NullAllowed, Export("getPMIVanityURL")]
        string PMIVanityURL { get; }

        // -(BOOL)isTelephoneOnlySupported;
        [Export("isTelephoneOnlySupported")]
        bool IsTelephoneOnlySupported { get; }

        // -(BOOL)isTelephoneAndVoipSupported;
        [Export("isTelephoneAndVoipSupported")]
        bool IsTelephoneAndVoipSupported { get; }

        // -(BOOL)is3rdPartyAudioSupported;
        [Export("is3rdPartyAudioSupported")]
        bool Is3rdPartyAudioSupported { get; }

        // -(NSString * _Nullable)get3rdPartyAudioInfo;
        [NullAllowed, Export("get3rdPartyAudioInfo")]
        string ThirdPartyAudioInfo { get; }

        // -(MobileRTCMeetingItemAudioType)getDefaultAudioInfo;
        [Export("getDefaultAudioInfo")]
        MobileRTCMeetingItemAudioType DefaultAudioInfo { get; }

        // -(BOOL)onlyAllowSignedInUserJoinMeeting;
        [Export("onlyAllowSignedInUserJoinMeeting")]
        bool OnlyAllowSignedInUserJoinMeeting { get; }

        // -(NSArray * _Nullable)getCanScheduleForUsersList;
        [NullAllowed, Export("getCanScheduleForUsersList")]
        NSObject[] CanScheduleForUsersList { get; }

        // -(BOOL)isLocalRecordingSupported;
        [Export("isLocalRecordingSupported")]
        bool IsLocalRecordingSupported { get; }

        // -(BOOL)isCloudRecordingSupported;
        [Export("isCloudRecordingSupported")]
        bool IsCloudRecordingSupported { get; }

        // -(MobileRTCMeetingItemRecordType)getDefaultAutoRecordType;
        [Export("getDefaultAutoRecordType")]
        MobileRTCMeetingItemRecordType DefaultAutoRecordType { get; }

        // -(BOOL)isSpecifiedDomainCanJoinFeatureOn;
        [Export("isSpecifiedDomainCanJoinFeatureOn")]
        bool IsSpecifiedDomainCanJoinFeatureOn { get; }

        // -(NSArray * _Nullable)getDefaultCanJoinUserSpecifiedDomains;
        [NullAllowed, Export("getDefaultCanJoinUserSpecifiedDomains")]
        NSString[] DefaultCanJoinUserSpecifiedDomains { get; }
    }

    // @interface MobileRTCAlternativeHost : NSObject
    [BaseType(typeof(NSObject))]
    interface MobileRTCAlternativeHost
    {
        // @property (readonly, retain, nonatomic) NSString * _Nullable email;
        [NullAllowed, Export("email", ArgumentSemantic.Retain)]
        string Email { get; }

        // @property (readonly, retain, nonatomic) NSString * _Nullable firstName;
        [NullAllowed, Export("firstName", ArgumentSemantic.Retain)]
        string FirstName { get; }

        // @property (readonly, retain, nonatomic) NSString * _Nullable lastName;
        [NullAllowed, Export("lastName", ArgumentSemantic.Retain)]
        string LastName { get; }

        // @property (readonly, assign, nonatomic) unsigned long long PMINumber;
        [Export("PMINumber")]
        ulong PMINumber { get; }

        // -(id _Nonnull)initWithEmailAddress:(NSString * _Nonnull)emailAddress firstname:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName PMI:(unsigned long long)PMINumber;
        [Export("initWithEmailAddress:firstname:lastName:PMI:")]
        IntPtr Constructor(string emailAddress, string firstName, string lastName, ulong PMINumber);
    }

    // @interface MobileRTCVideoRawData : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCVideoRawData
    {
        // @property (assign, nonatomic) char * yBuffer;
        [Export("yBuffer", ArgumentSemantic.Assign)]
        unsafe sbyte YBuffer { get; set; }

        // @property (assign, nonatomic) char * uBuffer;
        [Export("uBuffer", ArgumentSemantic.Assign)]
        unsafe sbyte UBuffer { get; set; }

        // @property (assign, nonatomic) char * vBuffer;
        [Export("vBuffer", ArgumentSemantic.Assign)]
        unsafe sbyte VBuffer { get; set; }

        // @property (assign, nonatomic) CGSize size;
        [Export("size", ArgumentSemantic.Assign)]
        CGSize Size { get; set; }

        // @property (assign, nonatomic) MobileRTCVideoRawDataFormat format;
        [Export("format", ArgumentSemantic.Assign)]
        MobileRTCVideoRawDataFormat Format { get; set; }

        // @property (assign, nonatomic) MobileRTCVideoRawDataRotation rotation;
        [Export("rotation", ArgumentSemantic.Assign)]
        MobileRTCVideoRawDataRotation Rotation { get; set; }

        // -(BOOL)canAddRef;
        [Export("canAddRef")]
        bool CanAddRef { get; }

        // -(BOOL)addRef;
        [Export("addRef")]
        bool AddRef { get; }

        // -(NSInteger)releaseRef;
        [Export("releaseRef")]
        nint ReleaseRef { get; }
    }

    // @interface MobileRTCAudioRawData : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCAudioRawData
    {
        // @property (assign, nonatomic) char * buffer;
        [Export("buffer", ArgumentSemantic.Assign)]
        unsafe sbyte Buffer { get; set; }

        // @property (assign, nonatomic) NSInteger bufferLen;
        [Export("bufferLen")]
        nint BufferLen { get; set; }

        // @property (assign, nonatomic) NSInteger sampleRate;
        [Export("sampleRate")]
        nint SampleRate { get; set; }

        // @property (assign, nonatomic) NSInteger channelNum;
        [Export("channelNum")]
        nint ChannelNum { get; set; }

        // -(BOOL)canAddRef;
        [Export("canAddRef")]
        bool CanAddRef { get; }

        // -(BOOL)addRef;
        [Export("addRef")]
        bool AddRef { get; }

        // -(NSInteger)releaseRef;
        [Export("releaseRef")]
        nint ReleaseRef { get; }
    }

    // @interface MobileRTCBOUser : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCBOUser
    {
        // -(NSString * _Nullable)getUserId;
        [NullAllowed, Export("getUserId")]
        string UserId { get; }

        // -(NSString * _Nullable)getUserName;
        [NullAllowed, Export("getUserName")]
        string UserName { get; }

        // -(MobileRTCBOUserStatus)getUserStatus;
        [Export("getUserStatus")]
        MobileRTCBOUserStatus UserStatus { get; }
    }

    // @interface MobileRTCBOMeeting : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCBOMeeting
    {
        // -(NSString * _Nullable)getBOMeetingId;
        [NullAllowed, Export("getBOMeetingId")]
        string BOMeetingId { get; }

        // -(NSString * _Nullable)getBOMeetingName;
        [NullAllowed, Export("getBOMeetingName")]
        string BOMeetingName { get; }

        // -(NSArray * _Nullable)getBOMeetingUserList;
        [NullAllowed, Export("getBOMeetingUserList")]
        NSObject[] BOMeetingUserList { get; }
    }

    // @interface MobileRTCBOCreator : NSObject
    [BaseType(typeof(NSObject))]
    interface MobileRTCBOCreator
    {
        // -(NSString * _Nullable)createBO:(NSString * _Nullable)boName;
        [Export("createBO:")]
        [return: NullAllowed]
        string CreateBO([NullAllowed] string boName);

        // -(BOOL)updateBO:(NSString * _Nullable)boId name:(NSString * _Nullable)boName;
        [Export("updateBO:name:")]
        bool UpdateBO([NullAllowed] string boId, [NullAllowed] string boName);

        // -(BOOL)removeBO:(NSString * _Nullable)boId;
        [Export("removeBO:")]
        bool RemoveBO([NullAllowed] string boId);

        // -(BOOL)assignUser:(NSString * _Nullable)boUserId toBO:(NSString * _Nullable)boId;
        [Export("assignUser:toBO:")]
        bool AssignUser([NullAllowed] string boUserId, [NullAllowed] string boId);

        // -(BOOL)removeUser:(NSString * _Nullable)boUserId fromBO:(NSString * _Nullable)boId;
        [Export("removeUser:fromBO:")]
        bool RemoveUser([NullAllowed] string boUserId, [NullAllowed] string boId);
    }

    // @interface MobileRTCBOAdmin : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCBOAdmin
    {
        // -(BOOL)startBO;
        [Export("startBO")]
        bool StartBO();

        // -(BOOL)stopBO;
        [Export("stopBO")]
        bool StopBO();

        // -(BOOL)assignNewUser:(NSString * _Nullable)boUserId toRunningBO:(NSString * _Nullable)boId;
        [Export("assignNewUser:toRunningBO:")]
        bool AssignNewUser([NullAllowed] string boUserId, [NullAllowed] string boId);

        // -(BOOL)switchUser:(NSString * _Nullable)boUserId toRunningBO:(NSString * _Nullable)boId;
        [Export("switchUser:toRunningBO:")]
        bool SwitchUser([NullAllowed] string boUserId, [NullAllowed] string boId);

        // -(BOOL)canStartBO;
        [Export("canStartBO")]
        bool CanStartBO { get; }
    }

    // @interface MobileRTCBOAssistant : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCBOAssistant
    {
        // -(BOOL)joinBO:(NSString * _Nullable)boId;
        [Export("joinBO:")]
        bool JoinBO([NullAllowed] string boId);

        // -(BOOL)leaveBO;
        [Export("leaveBO")]
        bool LeaveBO();
    }

    // @interface MobileRTCBOAttendee : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCBOAttendee
    {
        // -(BOOL)joinBO;
        [Export("joinBO")]
        bool JoinBO();

        // -(BOOL)leaveBO;
        [Export("leaveBO")]
        bool LeaveBO();

        // -(NSString * _Nullable)getBOName;
        [NullAllowed, Export("getBOName")]
        string BOName { get; }
    }

    // @interface MobileRTCBOData : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCBOData
    {
        // -(NSArray * _Nullable)getUnassignedUserList;
        [NullAllowed, Export("getUnassignedUserList")]
        NSObject[] UnassignedUserList { get; }

        // -(NSArray * _Nullable)getBOMeetingIDList;
        [NullAllowed, Export("getBOMeetingIDList")]
        NSObject[] BOMeetingIDList { get; }

        // -(MobileRTCBOUser * _Nullable)getBOUserByUserID:(NSString * _Nullable)userId;
        [Export("getBOUserByUserID:")]
        [return: NullAllowed]
        MobileRTCBOUser GetBOUserByUserID([NullAllowed] string userId);

        // -(MobileRTCBOMeeting * _Nullable)getBOMeetingByID:(NSString * _Nullable)boId;
        [Export("getBOMeetingByID:")]
        [return: NullAllowed]
        MobileRTCBOMeeting GetBOMeetingByID([NullAllowed] string boId);
    }

    // @protocol MobileRTCMeetingServiceDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MobileRTCMeetingServiceDelegate
    {
        // @optional -(void)onMeetingError:(MobileRTCMeetError)error message:(NSString * _Nullable)message;
        [Export("onMeetingError:message:")]
        void OnMeetingError(MobileRTCMeetError error, [NullAllowed] string message);

        // @optional -(void)onMeetingStateChange:(MobileRTCMeetingState)state;
        [Export("onMeetingStateChange:")]
        void OnMeetingStateChange(MobileRTCMeetingState state);

        // @optional -(void)onJoinMeetingConfirmed;
        [Export("onJoinMeetingConfirmed")]
        void OnJoinMeetingConfirmed();

        // @optional -(void)onMeetingReady;
        [Export("onMeetingReady")]
        void OnMeetingReady();

        // @optional -(void)onJBHWaitingWithCmd:(JBHCmd)cmd;
        [Export("onJBHWaitingWithCmd:")]
        void OnJBHWaitingWithCmd(JBHCmd cmd);

        // @optional -(void)onCheckCMRPrivilege:(MobileRTCCMRError)result;
        [Export("onCheckCMRPrivilege:")]
        void OnCheckCMRPrivilege(MobileRTCCMRError result);

        // @optional -(void)onMeetingEndedReason:(MobileRTCMeetingEndReason)reason;
        [Export("onMeetingEndedReason:")]
        void OnMeetingEndedReason(MobileRTCMeetingEndReason reason);

        // @optional -(void)onNoHostMeetingWillTerminate:(NSUInteger)minutes;
        [Export("onNoHostMeetingWillTerminate:")]
        void OnNoHostMeetingWillTerminate(nuint minutes);

        // @optional -(void)onMicrophoneStatusError:(MobileRTCMicrophoneError)error;
        [Export("onMicrophoneStatusError:")]
        void OnMicrophoneStatusError(MobileRTCMicrophoneError error);

        // @optional -(void)onJoinMeetingInfo:(MobileRTCJoinMeetingInfo)info completion:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, BOOL))completion;
        [Export("onJoinMeetingInfo:completion:")]
        void OnJoinMeetingInfo(MobileRTCJoinMeetingInfo info, Action<NSString, NSString, bool> completion);

        // @optional -(void)onProxyAuth:(NSString * _Nonnull)host port:(NSUInteger)port completion:(void (^ _Nonnull)(NSString * _Nonnull, NSUInteger, NSString * _Nonnull, NSString * _Nonnull, BOOL))completion;
        [Export("onProxyAuth:port:completion:")]
        void OnProxyAuth(string host, nuint port, Action<NSString, nuint, NSString, NSString, bool> completion);

        // @optional -(void)onAskToEndOtherMeeting:(void (^ _Nonnull)(BOOL))completion;
        [Export("onAskToEndOtherMeeting:")]
        void OnAskToEndOtherMeeting(Action<bool> completion);

        // @optional -(void)onMicrophoneNoPrivilege;
        [Export("onMicrophoneNoPrivilege")]
        void OnMicrophoneNoPrivilege();

        // @optional -(void)onCameraNoPrivilege;
        [Export("onCameraNoPrivilege")]
        void OnCameraNoPrivilege();

        // @optional -(void)onFreeMeetingReminder:(BOOL)host canFreeUpgrade:(BOOL)freeUpgrade isFirstGift:(BOOL)first completion:(void (^ _Nonnull)(BOOL))completion;
        [Export("onFreeMeetingReminder:canFreeUpgrade:isFirstGift:completion:")]
        void OnFreeMeetingReminder(bool host, bool freeUpgrade, bool first, Action<bool> completion);

        // @optional -(void)onUpgradeFreeMeetingResult:(NSUInteger)result;
        [Export("onUpgradeFreeMeetingResult:")]
        void OnUpgradeFreeMeetingResult(nuint result);

        // @optional -(BOOL)onClickedInviteButton:(UIViewController * _Nonnull)parentVC addInviteActionItem:(NSMutableArray * _Nonnull)array;
        [Export("onClickedInviteButton:addInviteActionItem:")]
        bool OnClickedInviteButton(UIViewController parentVC, NSMutableArray array);

        // @optional -(BOOL)onClickedAudioButton:(UIViewController * _Nonnull)parentVC;
        [Export("onClickedAudioButton:")]
        bool OnClickedAudioButton(UIViewController parentVC);

        // @optional -(BOOL)onClickedParticipantsButton:(UIViewController * _Nonnull)parentVC;
        [Export("onClickedParticipantsButton:")]
        bool OnClickedParticipantsButton(UIViewController parentVC);

        // @optional -(BOOL)onClickedShareButton:(UIViewController * _Nonnull)parentVC addShareActionItem:(NSMutableArray * _Nonnull)array;
        [Export("onClickedShareButton:addShareActionItem:")]
        bool OnClickedShareButton(UIViewController parentVC, NSMutableArray array);

        // @optional -(BOOL)onClickedEndButton:(UIViewController * _Nonnull)parentVC endButton:(UIButton * _Nonnull)endButton;
        [Export("onClickedEndButton:endButton:")]
        bool OnClickedEndButton(UIViewController parentVC, UIButton endButton);

        // @optional -(void)onOngoingShareStopped;
        [Export("onOngoingShareStopped")]
        void OnOngoingShareStopped();

        // @optional -(void)onClickedDialOut:(UIViewController * _Nonnull)parentVC isCallMe:(BOOL)me;
        [Export("onClickedDialOut:isCallMe:")]
        void OnClickedDialOut(UIViewController parentVC, bool me);

        // @optional -(void)onDialOutStatusChanged:(DialOutStatus)status;
        [Export("onDialOutStatusChanged:")]
        void OnDialOutStatusChanged(DialOutStatus status);

        // @optional -(void)onSendPairingCodeStateChanged:(MobileRTCH323ParingStatus)state MeetingNumber:(unsigned long long)meetingNumber;
        [Export("onSendPairingCodeStateChanged:MeetingNumber:")]
        void OnSendPairingCodeStateChanged(MobileRTCH323ParingStatus state, ulong meetingNumber);

        // @optional -(void)onCallRoomDeviceStateChanged:(H323CallOutStatus)state;
        [Export("onCallRoomDeviceStateChanged:")]
        void OnCallRoomDeviceStateChanged(H323CallOutStatus state);

        // @optional -(void)onInMeetingChat:(NSString * _Nonnull)messageID;
        [Export("onInMeetingChat:")]
        void OnInMeetingChat(string messageID);

        // @optional -(void)onWaitExternalSessionKey:(NSData * _Nonnull)key;
        [Export("onWaitExternalSessionKey:")]
        void OnWaitExternalSessionKey(NSData key);

        // @optional -(void)onLiveStreamStatusChange:(MobileRTCLiveStreamStatus)liveStreamStatus;
        [Export("onLiveStreamStatusChange:")]
        void OnLiveStreamStatusChange(MobileRTCLiveStreamStatus liveStreamStatus);

        // @optional -(void)onZoomIdentityExpired;
        [Export("onZoomIdentityExpired")]
        void OnZoomIdentityExpired();

        // @optional -(void)onClickShareScreen:(UIViewController * _Nonnull)parentVC;
        [Export("onClickShareScreen:")]
        void OnClickShareScreen(UIViewController parentVC);

        // @optional -(void)onClosedCaptionReceived:(NSString * _Nonnull)message;
        [Export("onClosedCaptionReceived:")]
        void OnClosedCaptionReceived(string message);

        // @optional -(void)onWaitingRoomStatusChange:(BOOL)needWaiting;
        [Export("onWaitingRoomStatusChange:")]
        void OnWaitingRoomStatusChange(bool needWaiting);

        // @optional -(void)onSinkAttendeeChatPriviledgeChanged:(MobileRTCMeetingChatPriviledgeType)currentPrivilege;
        [Export("onSinkAttendeeChatPriviledgeChanged:")]
        void OnSinkAttendeeChatPriviledgeChanged(MobileRTCMeetingChatPriviledgeType currentPrivilege);
    }

    // @protocol MobileRTCAudioServiceDelegate <MobileRTCMeetingServiceDelegate>
    [Protocol, Model(AutoGeneratedName = true)]
    interface MobileRTCAudioServiceDelegate : MobileRTCMeetingServiceDelegate
    {
        // @required -(void)onSinkMeetingAudioStatusChange:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkMeetingAudioStatusChange:")]
        void OnSinkMeetingAudioStatusChange(nuint userID);

        // @required -(void)onSinkMeetingMyAudioTypeChange;
        [Abstract]
        [Export("onSinkMeetingMyAudioTypeChange")]
        void OnSinkMeetingMyAudioTypeChange();

        // @required -(void)onAudioOutputChange;
        [Abstract]
        [Export("onAudioOutputChange")]
        void OnAudioOutputChange();

        // @required -(void)onMyAudioStateChange;
        [Abstract]
        [Export("onMyAudioStateChange")]
        void OnMyAudioStateChange();

        // @required -(void)onSinkMeetingAudioRequestUnmuteByHost;
        [Abstract]
        [Export("onSinkMeetingAudioRequestUnmuteByHost")]
        void OnSinkMeetingAudioRequestUnmuteByHost();
    }

    // @protocol MobileRTCVideoServiceDelegate <MobileRTCMeetingServiceDelegate>
    [Protocol, Model(AutoGeneratedName = true)]
    interface MobileRTCVideoServiceDelegate : MobileRTCMeetingServiceDelegate
    {
        // @required -(void)onSinkMeetingActiveVideo:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkMeetingActiveVideo:")]
        void OnSinkMeetingActiveVideo(nuint userID);

        // @required -(void)onSinkMeetingVideoStatusChange:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkMeetingVideoStatusChange:")]
        void OnSinkMeetingVideoStatusChange(nuint userID);

        // @required -(void)onMyVideoStateChange;
        [Abstract]
        [Export("onMyVideoStateChange")]
        void OnMyVideoStateChange();

        // @required -(void)onSpotlightVideoChange:(BOOL)on;
        [Abstract]
        [Export("onSpotlightVideoChange:")]
        void OnSpotlightVideoChange(bool on);

        // @required -(void)onSinkMeetingPreviewStopped;
        [Abstract]
        [Export("onSinkMeetingPreviewStopped")]
        void OnSinkMeetingPreviewStopped();

        // @required -(void)onSinkMeetingActiveVideoForDeck:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkMeetingActiveVideoForDeck:")]
        void OnSinkMeetingActiveVideoForDeck(nuint userID);

        // @required -(void)onSinkMeetingVideoQualityChanged:(MobileRTCNetworkQuality)qality userID:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkMeetingVideoQualityChanged:userID:")]
        void OnSinkMeetingVideoQualityChanged(MobileRTCNetworkQuality qality, nuint userID);

        // @required -(void)onSinkMeetingVideoRequestUnmuteByHost:(void (^ _Nonnull)(BOOL))completion;
        [Abstract]
        [Export("onSinkMeetingVideoRequestUnmuteByHost:")]
        void OnSinkMeetingVideoRequestUnmuteByHost(Action<bool> completion);

        // @required -(void)onSinkMeetingShowMinimizeMeetingOrBackZoomUI:(MobileRTCMinimizeMeetingState)state;
        [Abstract]
        [Export("onSinkMeetingShowMinimizeMeetingOrBackZoomUI:")]
        void OnSinkMeetingShowMinimizeMeetingOrBackZoomUI(MobileRTCMinimizeMeetingState state);
    }

    // @protocol MobileRTCUserServiceDelegate <MobileRTCMeetingServiceDelegate>
    [Protocol, Model(AutoGeneratedName = true)]
    interface MobileRTCUserServiceDelegate : MobileRTCMeetingServiceDelegate
    {
        // @required -(void)onMyHandStateChange;
        [Abstract]
        [Export("onMyHandStateChange")]
        void OnMyHandStateChange();

        // @required -(void)onInMeetingUserUpdated;
        [Abstract]
        [Export("onInMeetingUserUpdated")]
        void OnInMeetingUserUpdated();

        // @required -(void)onSinkMeetingUserJoin:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkMeetingUserJoin:")]
        void OnSinkMeetingUserJoin(nuint userID);

        // @required -(void)onSinkMeetingUserLeft:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkMeetingUserLeft:")]
        void OnSinkMeetingUserLeft(nuint userID);

        // @required -(void)onSinkMeetingUserRaiseHand:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkMeetingUserRaiseHand:")]
        void OnSinkMeetingUserRaiseHand(nuint userID);

        // @required -(void)onSinkMeetingUserLowerHand:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkMeetingUserLowerHand:")]
        void OnSinkMeetingUserLowerHand(nuint userID);

        // @required -(void)onMeetingHostChange:(NSUInteger)hostId;
        [Abstract]
        [Export("onMeetingHostChange:")]
        void OnMeetingHostChange(nuint hostId);

        // @required -(void)onMeetingCoHostChange:(NSUInteger)cohostId;
        [Abstract]
        [Export("onMeetingCoHostChange:")]
        void OnMeetingCoHostChange(nuint cohostId);

        // @required -(void)onClaimHostResult:(MobileRTCClaimHostError)error;
        [Abstract]
        [Export("onClaimHostResult:")]
        void OnClaimHostResult(MobileRTCClaimHostError error);
    }

    // @protocol MobileRTCShareServiceDelegate <MobileRTCMeetingServiceDelegate>
    [Protocol, Model(AutoGeneratedName = true)]
    interface MobileRTCShareServiceDelegate : MobileRTCMeetingServiceDelegate
    {
        // @required -(void)onAppShareSplash;
        [Abstract]
        [Export("onAppShareSplash")]
        void OnAppShareSplash();

        // @required -(void)onSinkMeetingActiveShare:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkMeetingActiveShare:")]
        void OnSinkMeetingActiveShare(nuint userID);

        // @required -(void)onSinkMeetingShareReceiving:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkMeetingShareReceiving:")]
        void OnSinkMeetingShareReceiving(nuint userID);

        // @required -(void)onSinkShareSizeChange:(NSUInteger)userID;
        [Abstract]
        [Export("onSinkShareSizeChange:")]
        void OnSinkShareSizeChange(nuint userID);
    }

    // @protocol MobileRTCWebinarServiceDelegate <MobileRTCMeetingServiceDelegate>
    [Protocol, Model(AutoGeneratedName = true)]
    interface MobileRTCWebinarServiceDelegate : MobileRTCMeetingServiceDelegate
    {
        // @required -(void)onSinkQAConnectStarted;
        [Abstract]
        [Export("onSinkQAConnectStarted")]
        void OnSinkQAConnectStarted();

        // @required -(void)onSinkQAConnected:(BOOL)connected;
        [Abstract]
        [Export("onSinkQAConnected:")]
        void OnSinkQAConnected(bool connected);

        // @required -(void)OnRefreshQAData;
        [Abstract]
        [Export("OnRefreshQAData")]
        void OnRefreshQAData();

        // @required -(void)onSinkQAOpenQuestionChanged:(NSInteger)count;
        [Abstract]
        [Export("onSinkQAOpenQuestionChanged:")]
        void OnSinkQAOpenQuestionChanged(nint count);

        // @required -(void)onSinkQAAddQuestion:(NSString * _Nonnull)questionID success:(BOOL)success;
        [Abstract]
        [Export("onSinkQAAddQuestion:success:")]
        void OnSinkQAAddQuestion(string questionID, bool success);

        // @required -(void)onSinkQAAddAnswer:(NSString * _Nonnull)answerID success:(BOOL)success;
        [Abstract]
        [Export("onSinkQAAddAnswer:success:")]
        void OnSinkQAAddAnswer(string answerID, bool success);

        // @required -(void)onSinkQuestionMarkedAsDismissed:(NSString * _Nonnull)questionID;
        [Abstract]
        [Export("onSinkQuestionMarkedAsDismissed:")]
        void OnSinkQuestionMarkedAsDismissed(string questionID);

        // @required -(void)onSinkReopenQuestion:(NSString * _Nonnull)questionID;
        [Abstract]
        [Export("onSinkReopenQuestion:")]
        void OnSinkReopenQuestion(string questionID);

        // @required -(void)onSinkReceiveQuestion:(NSString * _Nonnull)questionID;
        [Abstract]
        [Export("onSinkReceiveQuestion:")]
        void OnSinkReceiveQuestion(string questionID);

        // @required -(void)onSinkReceiveAnswer:(NSString * _Nonnull)answerID;
        [Abstract]
        [Export("onSinkReceiveAnswer:")]
        void OnSinkReceiveAnswer(string answerID);

        // @required -(void)onSinkUserLivingReply:(NSString * _Nonnull)questionID;
        [Abstract]
        [Export("onSinkUserLivingReply:")]
        void OnSinkUserLivingReply(string questionID);

        // @required -(void)onSinkUserEndLiving:(NSString * _Nonnull)questionID;
        [Abstract]
        [Export("onSinkUserEndLiving:")]
        void OnSinkUserEndLiving(string questionID);

        // @required -(void)onSinkVoteupQuestion:(NSString * _Nonnull)questionID orderChanged:(BOOL)orderChanged;
        [Abstract]
        [Export("onSinkVoteupQuestion:orderChanged:")]
        void OnSinkVoteupQuestion(string questionID, bool orderChanged);

        // @required -(void)onSinkRevokeVoteupQuestion:(NSString * _Nonnull)questionID orderChanged:(BOOL)orderChanged;
        [Abstract]
        [Export("onSinkRevokeVoteupQuestion:orderChanged:")]
        void OnSinkRevokeVoteupQuestion(string questionID, bool orderChanged);

        // @required -(void)onSinkQAAllowAskQuestionAnonymouslyNotification:(BOOL)beAllowed;
        [Abstract]
        [Export("onSinkQAAllowAskQuestionAnonymouslyNotification:")]
        void OnSinkQAAllowAskQuestionAnonymouslyNotification(bool beAllowed);

        // @required -(void)onSinkQAAllowAttendeeViewAllQuestionNotification:(BOOL)beAllowed;
        [Abstract]
        [Export("onSinkQAAllowAttendeeViewAllQuestionNotification:")]
        void OnSinkQAAllowAttendeeViewAllQuestionNotification(bool beAllowed);

        // @required -(void)onSinkQAAllowAttendeeUpVoteQuestionNotification:(BOOL)beAllowed;
        [Abstract]
        [Export("onSinkQAAllowAttendeeUpVoteQuestionNotification:")]
        void OnSinkQAAllowAttendeeUpVoteQuestionNotification(bool beAllowed);

        // @required -(void)onSinkQAAllowAttendeeAnswerQuestionNotification:(BOOL)beAllowed;
        [Abstract]
        [Export("onSinkQAAllowAttendeeAnswerQuestionNotification:")]
        void OnSinkQAAllowAttendeeAnswerQuestionNotification(bool beAllowed);

        // @required -(void)onSinkWebinarNeedRegister:(NSString * _Nonnull)registerURL;
        [Abstract]
        [Export("onSinkWebinarNeedRegister:")]
        void OnSinkWebinarNeedRegister(string registerURL);

        // @required -(void)onSinkJoinWebinarNeedUserNameAndEmailWithCompletion:(BOOL (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, BOOL))completion;
        [Abstract]
        [Export("onSinkJoinWebinarNeedUserNameAndEmailWithCompletion:")]
        void OnSinkJoinWebinarNeedUserNameAndEmailWithCompletion(Func<NSString, NSString, bool, bool> completion);

        // @required -(void)onSinkPanelistCapacityExceed;
        [Abstract]
        [Export("onSinkPanelistCapacityExceed")]
        void OnSinkPanelistCapacityExceed();

        // @required -(void)onSinkPromptAttendee2PanelistResult:(MobileRTCWebinarPromoteorDepromoteError)errorCode;
        [Abstract]
        [Export("onSinkPromptAttendee2PanelistResult:")]
        void OnSinkPromptAttendee2PanelistResult(MobileRTCWebinarPromoteorDepromoteError errorCode);

        // @required -(void)onSinkDePromptPanelist2AttendeeResult:(MobileRTCWebinarPromoteorDepromoteError)errorCode;
        [Abstract]
        [Export("onSinkDePromptPanelist2AttendeeResult:")]
        void OnSinkDePromptPanelist2AttendeeResult(MobileRTCWebinarPromoteorDepromoteError errorCode);

        // @required -(void)onSinkAllowAttendeeChatNotification:(MobileRTCChatAllowAttendeeChat)currentPrivilege;
        [Abstract]
        [Export("onSinkAllowAttendeeChatNotification:")]
        void OnSinkAllowAttendeeChatNotification(MobileRTCChatAllowAttendeeChat currentPrivilege);
    }

    // @protocol MobileRTCCustomizedUIMeetingDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MobileRTCCustomizedUIMeetingDelegate
    {
        // @required -(void)onInitMeetingView;
        [Abstract]
        [Export("onInitMeetingView")]
        void OnInitMeetingView();

        // @required -(void)onDestroyMeetingView;
        [Abstract]
        [Export("onDestroyMeetingView")]
        void OnDestroyMeetingView();
    }

    // @protocol MobileRTCVideoRawDataDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MobileRTCVideoRawDataDelegate
    {
        // @optional -(void)onMobileRTCRender:(MobileRTCRenderer * _Nonnull)renderer framePixelBuffer:(CVPixelBufferRef _Nullable)pixelBuffer rotation:(MobileRTCVideoRawDataRotation)rotation;
        [Export("onMobileRTCRender:framePixelBuffer:rotation:")]
        unsafe void FramePixelBuffer(MobileRTCRenderer renderer, [NullAllowed] CVPixelBuffer pixelBuffer, MobileRTCVideoRawDataRotation rotation);

        // @optional -(void)onMobileRTCRender:(MobileRTCRenderer * _Nonnull)renderer frameRawData:(MobileRTCVideoRawData * _Nonnull)rawData;
        [Export("onMobileRTCRender:frameRawData:")]
        void FrameRawData(MobileRTCRenderer renderer, MobileRTCVideoRawData rawData);

        // @optional -(void)onMobileRTCRender:(MobileRTCRenderer * _Nonnull)renderer rawDataSending:(BOOL)on;
        [Export("onMobileRTCRender:rawDataSending:")]
        void RawDataSending(MobileRTCRenderer renderer, bool on);
    }

    // @protocol MobileRTCAudioRawDataDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MobileRTCAudioRawDataDelegate
    {
        // @optional -(void)onMobileRTCMixedAudioRawData:(MobileRTCAudioRawData * _Nonnull)rawData;
        [Export("onMobileRTCMixedAudioRawData:")]
        void OnMobileRTCMixedAudioRawData(MobileRTCAudioRawData rawData);

        // @optional -(void)onMobileRTCOneWayAudioAudioRawData:(MobileRTCAudioRawData * _Nonnull)rawData userId:(NSUInteger)userId;
        [Export("onMobileRTCOneWayAudioAudioRawData:userId:")]
        void OnMobileRTCOneWayAudioAudioRawData(MobileRTCAudioRawData rawData, nuint userId);
    }

    // @protocol MobileRTCSMSServiceDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MobileRTCSMSServiceDelegate
    {
        // @optional -(void)onNeedRealNameAuth:(NSArray<MobileRTCRealNameCountryInfo *> * _Nonnull)supportCountryList privacyURL:(NSString * _Nonnull)privacyUrl retrieveHandle:(MobileRTCRetrieveSMSHandler * _Nonnull)handle;
        [Export("onNeedRealNameAuth:privacyURL:retrieveHandle:")]
        void OnNeedRealNameAuth(MobileRTCRealNameCountryInfo[] supportCountryList, string privacyUrl, MobileRTCRetrieveSMSHandler handle);

        // @optional -(void)onRetrieveSMSVerificationCodeResultNotification:(MobileRTCSMSServiceErr)result verifyHandle:(MobileRTCVerifySMSHandler * _Nonnull)handler;
        [Export("onRetrieveSMSVerificationCodeResultNotification:verifyHandle:")]
        void OnRetrieveSMSVerificationCodeResultNotification(MobileRTCSMSServiceErr result, MobileRTCVerifySMSHandler handler);

        // @optional -(void)onVerifySMSVerificationCodeResultNotification:(MobileRTCSMSServiceErr)result;
        [Export("onVerifySMSVerificationCodeResultNotification:")]
        void OnVerifySMSVerificationCodeResultNotification(MobileRTCSMSServiceErr result);
    }

    // @protocol MobileRTCBOServiceDelegate <MobileRTCMeetingServiceDelegate>
    [Protocol, Model(AutoGeneratedName = true)]
    interface MobileRTCBOServiceDelegate : MobileRTCMeetingServiceDelegate
    {
        // @optional -(void)onHasCreatorRightsNotification:(MobileRTCBOCreator * _Nonnull)creator;
        [Export("onHasCreatorRightsNotification:")]
        void OnHasCreatorRightsNotification(MobileRTCBOCreator creator);

        // @optional -(void)onHasAdminRightsNotification:(MobileRTCBOAdmin * _Nonnull)admin;
        [Export("onHasAdminRightsNotification:")]
        void OnHasAdminRightsNotification(MobileRTCBOAdmin admin);

        // @optional -(void)onHasAssistantRightsNotification:(MobileRTCBOAssistant * _Nonnull)assistant;
        [Export("onHasAssistantRightsNotification:")]
        void OnHasAssistantRightsNotification(MobileRTCBOAssistant assistant);

        // @optional -(void)onHasAttendeeRightsNotification:(MobileRTCBOAttendee * _Nonnull)attendee;
        [Export("onHasAttendeeRightsNotification:")]
        void OnHasAttendeeRightsNotification(MobileRTCBOAttendee attendee);

        // @optional -(void)onHasDataHelperRightsNotification:(MobileRTCBOData * _Nonnull)dataHelper;
        [Export("onHasDataHelperRightsNotification:")]
        void OnHasDataHelperRightsNotification(MobileRTCBOData dataHelper);

        // @optional -(void)onLostCreatorRightsNotification;
        [Export("onLostCreatorRightsNotification")]
        void OnLostCreatorRightsNotification();

        // @optional -(void)onLostAdminRightsNotification;
        [Export("onLostAdminRightsNotification")]
        void OnLostAdminRightsNotification();

        // @optional -(void)onLostAssistantRightsNotification;
        [Export("onLostAssistantRightsNotification")]
        void OnLostAssistantRightsNotification();

        // @optional -(void)onLostAttendeeRightsNotification;
        [Export("onLostAttendeeRightsNotification")]
        void OnLostAttendeeRightsNotification();

        // @optional -(void)onLostDataHelperRightsNotification;
        [Export("onLostDataHelperRightsNotification")]
        void OnLostDataHelperRightsNotification();
    }

    // @protocol MobileRTCBODataDelegate <MobileRTCMeetingServiceDelegate>
    [Protocol, Model(AutoGeneratedName = true)]
    interface MobileRTCBODataDelegate : MobileRTCMeetingServiceDelegate
    {
        // @required -(void)onBOInfoUpdated:(NSString * _Nullable)boId;
        [Abstract]
        [Export("onBOInfoUpdated:")]
        void OnBOInfoUpdated([NullAllowed] string boId);

        // @required -(void)onUnAssignedUserUpdated;
        [Abstract]
        [Export("onUnAssignedUserUpdated")]
        void OnUnAssignedUserUpdated();
    }

    [Static]
    partial interface Constants
    {
        // extern NSString * _Nonnull kMeetingParam_UserID;
        [Field("kMeetingParam_UserID", "__Internal")]
        NSString kMeetingParam_UserID { get; }

        // extern NSString * _Nonnull kMeetingParam_UserToken;
        [Field("kMeetingParam_UserToken", "__Internal")]
        NSString kMeetingParam_UserToken { get; }

        // extern NSString * _Nonnull kMeetingParam_UserType;
        [Field("kMeetingParam_UserType", "__Internal")]
        NSString kMeetingParam_UserType { get; }

        // extern NSString * _Nonnull kMeetingParam_Username;
        [Field("kMeetingParam_Username", "__Internal")]
        NSString kMeetingParam_Username { get; }

        // extern NSString * _Nonnull kMeetingParam_MeetingNumber;
        [Field("kMeetingParam_MeetingNumber", "__Internal")]
        NSString kMeetingParam_MeetingNumber { get; }

        // extern NSString * _Nonnull kMeetingParam_MeetingPassword;
        [Field("kMeetingParam_MeetingPassword", "__Internal")]
        NSString kMeetingParam_MeetingPassword { get; }

        // extern NSString * _Nonnull kMeetingParam_ParticipantID;
        [Field("kMeetingParam_ParticipantID", "__Internal")]
        NSString kMeetingParam_ParticipantID { get; }

        // extern NSString * _Nonnull kMeetingParam_IsAppShare;
        [Field("kMeetingParam_IsAppShare", "__Internal")]
        NSString kMeetingParam_IsAppShare { get; }

        // extern NSString * _Nonnull kMeetingParam_WebinarToken;
        [Field("kMeetingParam_WebinarToken", "__Internal")]
        NSString kMeetingParam_WebinarToken { get; }

        // extern NSString * _Nonnull kMeetingParam_NoAudio;
        [Field("kMeetingParam_NoAudio", "__Internal")]
        NSString kMeetingParam_NoAudio { get; }

        // extern NSString * _Nonnull kMeetingParam_NoVideo;
        [Field("kMeetingParam_NoVideo", "__Internal")]
        NSString kMeetingParam_NoVideo { get; }

        // extern NSString * _Nonnull kMeetingParam_VanityID;
        [Field("kMeetingParam_VanityID", "__Internal")]
        NSString kMeetingParam_VanityID { get; }
    }

    // @interface MobileRTCMeetingStartParam : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCMeetingStartParam
    {
        // @property (assign, readwrite, nonatomic) BOOL isAppShare;
        [Export("isAppShare")]
        bool IsAppShare { get; set; }

        // @property (assign, readwrite, nonatomic) BOOL noAudio;
        [Export("noAudio")]
        bool NoAudio { get; set; }

        // @property (assign, readwrite, nonatomic) BOOL noVideo;
        [Export("noVideo")]
        bool NoVideo { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nullable participantID;
        [NullAllowed, Export("participantID", ArgumentSemantic.Retain)]
        string ParticipantID { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nullable vanityID;
        [NullAllowed, Export("vanityID", ArgumentSemantic.Retain)]
        string VanityID { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nullable meetingNumber;
        [NullAllowed, Export("meetingNumber", ArgumentSemantic.Retain)]
        string MeetingNumber { get; set; }
    }

    // @interface MobileRTCMeetingStartParam4LoginlUser : MobileRTCMeetingStartParam
    [BaseType(typeof(MobileRTCMeetingStartParam))]
    [Protocol]
    interface MobileRTCMeetingStartParam4LoginlUser
    {
    }

    // @interface MobileRTCMeetingStartParam4WithoutLoginUser : MobileRTCMeetingStartParam
    [BaseType(typeof(MobileRTCMeetingStartParam))]
    [Protocol]
    interface MobileRTCMeetingStartParam4WithoutLoginUser
    {
        // @property (assign, readwrite, nonatomic) MobileRTCUserType userType;
        [Export("userType", ArgumentSemantic.Assign)]
        MobileRTCUserType UserType { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nonnull userName;
        [Export("userName", ArgumentSemantic.Retain)]
        string UserName { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nonnull userToken;
        [Export("userToken", ArgumentSemantic.Retain)]
        string UserToken { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nonnull userID;
        [Export("userID", ArgumentSemantic.Retain)]
        string UserID { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nonnull zak;
        [Export("zak", ArgumentSemantic.Retain)]
        string Zak { get; set; }
    }

    // @interface MobileRTCMeetingService : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCMeetingService
    {
        [Wrap("WeakDelegate")]
        [NullAllowed]
        MobileRTCMeetingServiceDelegate Delegate { get; set; }

        // @property (assign, nonatomic) id<MobileRTCMeetingServiceDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        [Wrap("WeakCustomizedUImeetingDelegate")]
        [NullAllowed]
        MobileRTCCustomizedUIMeetingDelegate CustomizedUImeetingDelegate { get; set; }

        // @property (assign, nonatomic) id<MobileRTCCustomizedUIMeetingDelegate> _Nullable customizedUImeetingDelegate;
        [NullAllowed, Export("customizedUImeetingDelegate", ArgumentSemantic.Assign)]
        NSObject WeakCustomizedUImeetingDelegate { get; set; }

        // -(MobileRTCMeetError)startMeetingWithDictionary:(NSDictionary * _Nonnull)dict;
        [Export("startMeetingWithDictionary:")]
        MobileRTCMeetError StartMeetingWithDictionary(NSDictionary dict);

        // -(MobileRTCMeetError)startMeetingWithStartParam:(MobileRTCMeetingStartParam * _Nonnull)param;
        [Export("startMeetingWithStartParam:")]
        MobileRTCMeetError StartMeetingWithStartParam(MobileRTCMeetingStartParam param);

        // -(MobileRTCMeetError)joinMeetingWithDictionary:(NSDictionary * _Nonnull)dict;
        [Export("joinMeetingWithDictionary:")]
        MobileRTCMeetError JoinMeetingWithDictionary(NSDictionary dict);

        // -(MobileRTCMeetError)handZoomWebUrl:(NSString * _Nonnull)meetingUrl;
        [Export("handZoomWebUrl:")]
        MobileRTCMeetError HandZoomWebUrl(string meetingUrl);

        // -(MobileRTCMeetingState)getMeetingState;
        [Export("getMeetingState")]
        MobileRTCMeetingState MeetingState { get; }

        // -(void)leaveMeetingWithCmd:(LeaveMeetingCmd)cmd;
        [Export("leaveMeetingWithCmd:")]
        void LeaveMeetingWithCmd(LeaveMeetingCmd cmd);

        // -(UIView * _Nullable)meetingView;
        [NullAllowed, Export("meetingView")]
        UIView MeetingView { get; }
    }

    // @interface AppShare (MobileRTCMeetingService)
    [Category]
    [BaseType(typeof(MobileRTCMeetingService))]
    interface MobileRTCMeetingService_AppShare
    {
        // -(BOOL)isDirectAppShareMeeting;
        [Export("isDirectAppShareMeeting")]
        bool IsDirectAppShareMeeting();

        // -(void)appShareWithView:(id _Nonnull)view;
        [Export("appShareWithView:")]
        void AppShareWithView(NSObject view);

        // -(void)appShareWithReplayKit __attribute__((deprecated("")));
        [Export("appShareWithReplayKit")]
        void AppShareWithReplayKit();

        // -(BOOL)startAppShare;
        [Export("startAppShare")]
        bool StartAppShare();

        // -(void)stopAppShare;
        [Export("stopAppShare")]
        void StopAppShare();

        // -(BOOL)isStartingShare;
        [Export("isStartingShare")]
        bool IsStartingShare();

        // -(BOOL)isViewingShare;
        [Export("isViewingShare")]
        bool IsViewingShare();

        // -(BOOL)isAnnotationOff;
        [Export("isAnnotationOff")]
        bool IsAnnotationOff();

        // -(BOOL)suspendSharing:(BOOL)suspend;
        [Export("suspendSharing:")]
        bool SuspendSharing(bool suspend);
    }

    // @interface MobileRTCVideoStatus : NSObject
    [Protocol]
    [BaseType(typeof(NSObject))]
    interface MobileRTCVideoStatus
    {
        // @property (assign, nonatomic) BOOL isSending;
        [Export("isSending")]
        bool IsSending { get; set; }

        // @property (assign, nonatomic) BOOL isReceiving;
        [Export("isReceiving")]
        bool IsReceiving { get; set; }

        // @property (assign, nonatomic) BOOL isSource;
        [Export("isSource")]
        bool IsSource { get; set; }
    }

    // @interface MobileRTCAudioStatus : NSObject
    [Protocol]
    [BaseType(typeof(NSObject))]
    interface MobileRTCAudioStatus
    {
        // @property (assign, nonatomic) BOOL isMuted;
        [Export("isMuted")]
        bool IsMuted { get; set; }

        // @property (assign, nonatomic) BOOL isTalking;
        [Export("isTalking")]
        bool IsTalking { get; set; }

        // @property (assign, nonatomic) MobileRTCAudioType audioType;
        [Export("audioType", ArgumentSemantic.Assign)]
        MobileRTCAudioType AudioType { get; set; }
    }

    // @interface MobileRTCMeetingUserInfo : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCMeetingUserInfo
    {
        // @property (assign, nonatomic) NSUInteger userID;
        [Export("userID")]
        nuint UserID { get; set; }

        // @property (retain, nonatomic) NSString * _Nonnull userName;
        [Export("userName", ArgumentSemantic.Retain)]
        string UserName { get; set; }
        
        // @property (retain, nonatomic) NSString * _Nonnull avatarPath;
        [Export("avatarPath", ArgumentSemantic.Retain)]
        string AvatarPath { get; set; }

        // @property (assign, nonatomic) NSInteger unread;
        [Export("unread")]
        nint Unread { get; set; }

        // @property (retain, nonatomic) MobileRTCVideoStatus * _Nonnull videoStatus;
        [Export("videoStatus", ArgumentSemantic.Retain)]
        MobileRTCVideoStatus VideoStatus { get; set; }

        // @property (retain, nonatomic) MobileRTCAudioStatus * _Nonnull audioStatus;
        [Export("audioStatus", ArgumentSemantic.Retain)]
        MobileRTCAudioStatus AudioStatus { get; set; }

        // @property (assign, nonatomic) BOOL handRaised;
        [Export("handRaised")]
        bool HandRaised { get; set; }

        // @property (assign, nonatomic) BOOL inSilentMode;
        [Export("inSilentMode")]
        bool InSilentMode { get; set; }

        // @property (assign, nonatomic) BOOL isCohost;
        [Export("isCohost")]
        bool IsCohost { get; set; }

        // @property (assign, nonatomic) BOOL isHost;
        [Export("isHost")]
        bool IsHost { get; set; }

        // @property (assign, nonatomic) BOOL isH323User;
        [Export("isH323User")]
        bool IsH323User { get; set; }

        // @property (assign, nonatomic) BOOL isPureCallInUser;
        [Export("isPureCallInUser")]
        bool IsPureCallInUser { get; set; }

        // @property (assign, nonatomic) BOOL isSharingPureComputerAudio;
        [Export("isSharingPureComputerAudio")]
        bool IsSharingPureComputerAudio { get; set; }

        // @property (assign, nonatomic) MobileRTCFeedbackType feedbackType;
        [Export("feedbackType", ArgumentSemantic.Assign)]
        MobileRTCFeedbackType FeedbackType { get; set; }
    }

    // @interface MobileRTCMeetingWebinarAttendeeInfo : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCMeetingWebinarAttendeeInfo
    {
        // @property (assign, nonatomic) NSUInteger userID;
        [Export("userID")]
        nuint UserID { get; set; }

        // @property (retain, nonatomic) NSString * _Nullable userName;
        [NullAllowed, Export("userName", ArgumentSemantic.Retain)]
        string UserName { get; set; }

        // @property (retain, nonatomic) NSString * _Nullable emailAddress;
        [NullAllowed, Export("emailAddress", ArgumentSemantic.Retain)]
        string EmailAddress { get; set; }
    }

    // @interface MobileRTCMeetingChat : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCMeetingChat
    {
        // @property (readwrite, retain, nonatomic) NSString * _Nullable chatId;
        [NullAllowed, Export("chatId", ArgumentSemantic.Retain)]
        string ChatId { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nullable senderId;
        [NullAllowed, Export("senderId", ArgumentSemantic.Retain)]
        string SenderId { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nullable senderName;
        [NullAllowed, Export("senderName", ArgumentSemantic.Retain)]
        string SenderName { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nullable receiverId;
        [NullAllowed, Export("receiverId", ArgumentSemantic.Retain)]
        string ReceiverId { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nullable receiverName;
        [NullAllowed, Export("receiverName", ArgumentSemantic.Retain)]
        string ReceiverName { get; set; }

        // @property (readwrite, retain, nonatomic) NSString * _Nullable content;
        [NullAllowed, Export("content", ArgumentSemantic.Retain)]
        string Content { get; set; }

        // @property (readwrite, retain, nonatomic) NSDate * _Nullable date;
        [NullAllowed, Export("date", ArgumentSemantic.Retain)]
        NSDate Date { get; set; }

        // @property (readwrite, nonatomic) BOOL isMyself;
        [Export("isMyself")]
        bool IsMyself { get; set; }

        // @property (readwrite, nonatomic) BOOL isPrivate;
        [Export("isPrivate")]
        bool IsPrivate { get; set; }
    }

    // @interface InMeeting (MobileRTCMeetingService)
    [Category]
    [BaseType(typeof(MobileRTCMeetingService))]
    interface MobileRTCMeetingService_InMeeting
    {
        // -(BOOL)isMeetingHost;
        [Export("isMeetingHost")]
        bool IsMeetingHost();

        // -(BOOL)isMeetingCoHost;
        [Export("isMeetingCoHost")]
        bool IsMeetingCoHost();

        // -(BOOL)isWebinarAttendee;
        [Export("isWebinarAttendee")]
        bool IsWebinarAttendee();

        // -(BOOL)isWebinarPanelist;
        [Export("isWebinarPanelist")]
        bool IsWebinarPanelist();

        // -(BOOL)isMeetingLocked;
        [Export("isMeetingLocked")]
        bool IsMeetingLocked();

        // -(BOOL)isShareLocked;
        [Export("isShareLocked")]
        bool IsShareLocked();

        // -(BOOL)isCMREnabled;
        [Export("isCMREnabled")]
        bool IsCMREnabled();

        // -(BOOL)isCMRInProgress;
        [Export("isCMRInProgress")]
        bool IsCMRInProgress();

        // -(BOOL)isCMRPaused;
        [Export("isCMRPaused")]
        bool IsCMRPaused();

        // -(BOOL)resumePauseCMR;
        [Export("resumePauseCMR")]
        bool ResumePauseCMR();

        // -(void)turnOnCMR:(BOOL)on;
        [Export("turnOnCMR:")]
        void TurnOnCMR(bool on);

        // -(BOOL)handleE2EMeetingKey:(NSArray * _Nonnull)keyArray withLeaveMeeting:(BOOL)leave;
        [Export("handleE2EMeetingKey:withLeaveMeeting:")]
        bool HandleE2EMeetingKey(NSObject[] keyArray, bool leave);

        // -(BOOL)isExternalMeeting;
        [Export("isExternalMeeting")]
        bool IsExternalMeeting();

        // -(BOOL)isInternalMeeting;
        [Export("isInternalMeeting")]
        bool IsInternalMeeting();

        // -(BOOL)isFailoverMeeting;
        [Export("isFailoverMeeting")]
        bool IsFailoverMeeting();

        // -(BOOL)isWebinarMeeting;
        [Export("isWebinarMeeting")]
        bool IsWebinarMeeting();

        // -(BOOL)lockMeeting:(BOOL)lock;
        [Export("lockMeeting:")]
        bool LockMeeting(bool @lock);

        // -(BOOL)lockShare:(BOOL)lock;
        [Export("lockShare:")]
        bool LockShare(bool @lock);

        // -(MobileRTCNetworkQuality)queryNetworkQuality:(MobileRTCComponentType)type withDataFlow:(BOOL)sending;
        [Export("queryNetworkQuality:withDataFlow:")]
        MobileRTCNetworkQuality QueryNetworkQuality(MobileRTCComponentType type, bool sending);

        // -(BOOL)presentMeetingChatViewController:(UIViewController * _Nonnull)parentVC userId:(NSInteger)userId;
        [Export("presentMeetingChatViewController:userId:")]
        bool PresentMeetingChatViewController(UIViewController parentVC, nint userId);

        // -(BOOL)presentParticipantsViewController:(UIViewController * _Nonnull)parentVC;
        [Export("presentParticipantsViewController:")]
        bool PresentParticipantsViewController(UIViewController parentVC);

        // -(BOOL)configDSCPWithAudioValue:(NSUInteger)audioValue VideoValue:(NSUInteger)videoValue;
        [Export("configDSCPWithAudioValue:VideoValue:")]
        bool ConfigDSCPWithAudioValue(nuint audioValue, nuint videoValue);

        // -(BOOL)hideFullPhoneNumberForPureCallInUser:(BOOL)bHide;
        [Export("hideFullPhoneNumberForPureCallInUser:")]
        bool HideFullPhoneNumberForPureCallInUser(bool bHide);

        // -(BOOL)startLiveStreamWithStreamingURL:(NSString * _Nonnull)streamingURL StreamingKey:(NSString * _Nonnull)key BroadcastURL:(NSString * _Nonnull)broadcastURL;
        [Export("startLiveStreamWithStreamingURL:StreamingKey:BroadcastURL:")]
        bool StartLiveStreamWithStreamingURL(string streamingURL, string key, string broadcastURL);

        // -(NSDictionary * _Nullable)getLiveStreamURL;
        [NullAllowed, Export("getLiveStreamURL")]
        NSDictionary LiveStreamURL();

        // -(BOOL)stopLiveStream;
        [Export("stopLiveStream")]
        bool StopLiveStream();

        // -(BOOL)showMobileRTCMeeting:(void (^ _Nonnull)(void))completion;
        [Export("showMobileRTCMeeting:")]
        bool ShowMobileRTCMeeting(Action completion);

        // -(BOOL)hideMobileRTCMeeting:(void (^ _Nonnull)(void))completion;
        [Export("hideMobileRTCMeeting:")]
        bool HideMobileRTCMeeting(Action completion);

        // -(void)showMeetingControlBar;
        [Export("showMeetingControlBar")]
        void ShowMeetingControlBar();

        // -(BOOL)isQAEnabled;
        [Export("isQAEnabled")]
        bool IsQAEnabled();

        // -(BOOL)presentQAViewController:(UIViewController * _Nonnull)parentVC;
        [Export("presentQAViewController:")]
        bool PresentQAViewController(UIViewController parentVC);

        // -(NSString * _Nullable)getMeetingPassword;
        [NullAllowed, Export("getMeetingPassword")]
        string MeetingPassword();

        // -(BOOL)showMinimizeMeetingFromZoomUIMeeting;
        [Export("showMinimizeMeetingFromZoomUIMeeting")]
        bool ShowMinimizeMeetingFromZoomUIMeeting();

        // -(BOOL)backZoomUIMeetingFromMinimizeMeeting;
        [Export("backZoomUIMeetingFromMinimizeMeeting")]
        bool BackZoomUIMeetingFromMinimizeMeeting();
    }

    // @interface MobileRTCRoomDevice : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCRoomDevice
    {
        // @property (copy, nonatomic) NSString * deviceName;
        [Export("deviceName")]
        string DeviceName { get; set; }

        // @property (copy, nonatomic) NSString * ipAddress;
        [Export("ipAddress")]
        string IpAddress { get; set; }

        // @property (copy, nonatomic) NSString * e164num;
        [Export("e164num")]
        string E164num { get; set; }

        // @property (assign, nonatomic) MobileRTCDeviceType deviceType;
        [Export("deviceType", ArgumentSemantic.Assign)]
        MobileRTCDeviceType DeviceType { get; set; }

        // @property (assign, nonatomic) MobileRTCDeviceEncryptType encryptType;
        [Export("encryptType", ArgumentSemantic.Assign)]
        MobileRTCDeviceEncryptType EncryptType { get; set; }
    }

    // @interface MobileRTCCallCountryCode : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCCallCountryCode
    {
        // @property (retain, nonatomic) NSString * countryId;
        [Export("countryId", ArgumentSemantic.Retain)]
        string CountryId { get; set; }

        // @property (retain, nonatomic) NSString * countryName;
        [Export("countryName", ArgumentSemantic.Retain)]
        string CountryName { get; set; }

        // @property (retain, nonatomic) NSString * countryCode;
        [Export("countryCode", ArgumentSemantic.Retain)]
        string CountryCode { get; set; }

        // @property (retain, nonatomic) NSString * countryNumber;
        [Export("countryNumber", ArgumentSemantic.Retain)]
        string CountryNumber { get; set; }

        // @property (assign, nonatomic) BOOL tollFree;
        [Export("tollFree")]
        bool TollFree { get; set; }
    }

    // @interface Customize (MobileRTCMeetingService)
    [Category]
    [BaseType(typeof(MobileRTCMeetingService))]
    interface MobileRTCMeetingService_Customize
    {
        // -(void)customizeMeetingTitle:(NSString * _Nullable)title;
        [Export("customizeMeetingTitle:")]
        void CustomizeMeetingTitle([NullAllowed] string title);

        // -(BOOL)isDialOutSupported;
        [Export("isDialOutSupported")]
        bool IsDialOutSupported();

        // -(BOOL)isDialOutInProgress;
        [Export("isDialOutInProgress")]
        bool IsDialOutInProgress();

        // -(BOOL)dialOut:(NSString * _Nonnull)phone isCallMe:(BOOL)me withName:(NSString * _Nullable)username;
        [Export("dialOut:isCallMe:withName:")]
        bool DialOut(string phone, bool me, [NullAllowed] string username);

        // -(BOOL)cancelDialOut:(BOOL)isCallMe;
        [Export("cancelDialOut:")]
        bool CancelDialOut(bool isCallMe);

        // -(BOOL)isCallRoomDeviceSupported;
        [Export("isCallRoomDeviceSupported")]
        bool IsCallRoomDeviceSupported();

        // -(BOOL)isCallingRoomDevice;
        [Export("isCallingRoomDevice")]
        bool IsCallingRoomDevice();

        // -(BOOL)cancelCallRoomDevice;
        [Export("cancelCallRoomDevice")]
        bool CancelCallRoomDevice();

        // -(NSArray * _Nullable)getIPAddressList;
        [Export("getIPAddressList")]
        NSObject[] IPAddressList();

        // -(NSString * _Nullable)getH323MeetingPassword;
        [Export("getH323MeetingPassword")]
        string H323MeetingPassword();

        // -(NSArray * _Nullable)getRoomDeviceList;
        [Export("getRoomDeviceList")]
        NSObject[] RoomDeviceList();

        // -(BOOL)sendPairingCode:(NSString * _Nonnull)code WithMeetingNumber:(unsigned long long)meetingNumber;
        [Export("sendPairingCode:WithMeetingNumber:")]
        bool SendPairingCode(string code, ulong meetingNumber);

        // -(BOOL)callRoomDevice:(MobileRTCRoomDevice * _Nonnull)device;
        [Export("callRoomDevice:")]
        bool CallRoomDevice(MobileRTCRoomDevice device);

        // -(NSUInteger)getParticipantID;
        [Export("getParticipantID")]
        nuint ParticipantID();

        // -(MobileRTCCallCountryCode * _Nullable)getDialInCurrentCountryCode;
        [NullAllowed, Export("getDialInCurrentCountryCode")]
        MobileRTCCallCountryCode DialInCurrentCountryCode();

        // -(NSArray * _Nullable)getDialInAllCountryCodes;
        [Export("getDialInAllCountryCodes")]
        NSObject[] DialInAllCountryCodes();

        // -(NSArray * _Nullable)getDialInCallCodesWithCountryId:(NSString * _Nullable)countryId;
        [Export("getDialInCallCodesWithCountryId:")]
        [return: NullAllowed]
        NSObject[] GetDialInCallCodesWithCountryId([NullAllowed] string countryId);

        // -(BOOL)dialInCall:(NSString * _Nullable)countryNumber;
        [Export("dialInCall:")]
        bool DialInCall([NullAllowed] string countryNumber);
    }

    // @interface Audio (MobileRTCMeetingService)
    [Category]
    [BaseType(typeof(MobileRTCMeetingService))]
    interface MobileRTCMeetingService_Audio
    {
        // -(MobileRTCAudioType)myAudioType;
        [Export("myAudioType")]
        MobileRTCAudioType MyAudioType();

        // -(BOOL)connectMyAudio:(BOOL)on;
        [Export("connectMyAudio:")]
        bool ConnectMyAudio(bool on);

        // -(MobileRTCAudioOutput)myAudioOutputDescription;
        [Export("myAudioOutputDescription")]
        MobileRTCAudioOutput MyAudioOutputDescription();

        // -(BOOL)isMyAudioMuted;
        [Export("isMyAudioMuted")]
        bool IsMyAudioMuted();

        // -(BOOL)canUnmuteMyAudio;
        [Export("canUnmuteMyAudio")]
        bool CanUnmuteMyAudio();

        // -(BOOL)isMuteOnEntryOn;
        [Export("isMuteOnEntryOn")]
        bool IsMuteOnEntryOn();

        // -(BOOL)muteOnEntry:(BOOL)on;
        [Export("muteOnEntry:")]
        bool MuteOnEntry(bool on);

        // -(BOOL)isUserAudioMuted:(NSUInteger)userID;
        [Export("isUserAudioMuted:")]
        bool IsUserAudioMuted(nuint userID);

        // -(BOOL)muteUserAudio:(BOOL)mute withUID:(NSUInteger)userID;
        [Export("muteUserAudio:withUID:")]
        bool MuteUserAudio(bool mute, nuint userID);

        // -(BOOL)muteAllUserAudio:(BOOL)allowSelfUnmute;
        [Export("muteAllUserAudio:")]
        bool MuteAllUserAudio(bool allowSelfUnmute);

        // -(BOOL)unmuteAllUserAudio;
        [Export("unmuteAllUserAudio")]
        bool UnmuteAllUserAudio();

        // -(BOOL)isSupportedVOIP;
        [Export("isSupportedVOIP")]
        bool IsSupportedVOIP();

        // -(BOOL)isPlayChimeOn;
        [Export("isPlayChimeOn")]
        bool IsPlayChimeOn();

        // -(BOOL)playChime:(BOOL)on;
        [Export("playChime:")]
        bool PlayChime(bool on);

        // -(MobileRTCAudioError)muteMyAudio:(BOOL)mute;
        [Export("muteMyAudio:")]
        MobileRTCAudioError MuteMyAudio(bool mute);

        // -(MobileRTCAudioError)switchMyAudioSource;
        [Export("switchMyAudioSource")]
        MobileRTCAudioError SwitchMyAudioSource();

        // -(void)resetMeetingAudioSession;
        [Export("resetMeetingAudioSession")]
        void ResetMeetingAudioSession();

        // -(void)resetMeetingAudioForCallKitHeld;
        [Export("resetMeetingAudioForCallKitHeld")]
        void ResetMeetingAudioForCallKitHeld();
    }

    // @interface Video (MobileRTCMeetingService)
    [Category]
    [BaseType(typeof(MobileRTCMeetingService))]
    interface MobileRTCMeetingService_Video
    {
        // -(BOOL)isSendingMyVideo;
        [Export("isSendingMyVideo")]
        bool IsSendingMyVideo();

        // -(BOOL)canUnmuteMyVideo;
        [Export("canUnmuteMyVideo")]
        bool CanUnmuteMyVideo();

        // -(MobileRTCVideoError)muteMyVideo:(BOOL)mute;
        [Export("muteMyVideo:")]
        MobileRTCVideoError MuteMyVideo(bool mute);

        // -(BOOL)isUserSpotlighted:(NSUInteger)userId;
        [Export("isUserSpotlighted:")]
        bool IsUserSpotlighted(nuint userId);

        // -(BOOL)spotlightVideo:(BOOL)on withUser:(NSUInteger)userId;
        [Export("spotlightVideo:withUser:")]
        bool SpotlightVideo(bool on, nuint userId);

        // -(BOOL)isUserPinned:(NSUInteger)userId;
        [Export("isUserPinned:")]
        bool IsUserPinned(nuint userId);

        // -(BOOL)pinVideo:(BOOL)on withUser:(NSUInteger)userId;
        [Export("pinVideo:withUser:")]
        bool PinVideo(bool on, nuint userId);

        // -(BOOL)isUserVideoSending:(NSUInteger)userID;
        [Export("isUserVideoSending:")]
        bool IsUserVideoSending(nuint userID);

        // -(BOOL)stopUserVideo:(NSUInteger)userID;
        [Export("stopUserVideo:")]
        bool StopUserVideo(nuint userID);

        // -(BOOL)askUserStartVideo:(NSUInteger)userID;
        [Export("askUserStartVideo:")]
        bool AskUserStartVideo(nuint userID);

        // -(CGSize)getUserVideoSize:(NSUInteger)userID;
        [Export("getUserVideoSize:")]
        CGSize GetUserVideoSize(nuint userID);

        // -(BOOL)isBackCamera;
        [Export("isBackCamera")]
        bool IsBackCamera();

        // -(MobileRTCCameraError)switchMyCamera;
        [Export("switchMyCamera")]
        MobileRTCCameraError SwitchMyCamera();
    }

    // @interface User (MobileRTCMeetingService)
    [Category]
    [BaseType(typeof(MobileRTCMeetingService))]
    interface MobileRTCMeetingService_User
    {
        // -(BOOL)changeName:(NSString * _Nonnull)inputName withUserID:(NSUInteger)userId;
        [Export("changeName:withUserID:")]
        bool ChangeName(string inputName, nuint userId);

        // -(NSArray * _Nullable)getInMeetingUserList;
        [Export("getInMeetingUserList")]
        NSNumber[] InMeetingUserList();

        // -(NSArray * _Nullable)getWebinarAttendeeList;
        [Export("getWebinarAttendeeList")]
        NSNumber[] WebinarAttendeeList();

        // -(MobileRTCMeetingUserInfo * _Nullable)userInfoByID:(NSUInteger)userId;
        [Export("userInfoByID:")]
        [return: NullAllowed]
        MobileRTCMeetingUserInfo UserInfoByID(nuint userId);

        // -(MobileRTCMeetingWebinarAttendeeInfo * _Nullable)attendeeInfoByID:(NSUInteger)userId;
        [Export("attendeeInfoByID:")]
        [return: NullAllowed]
        MobileRTCMeetingWebinarAttendeeInfo AttendeeInfoByID(nuint userId);

        // -(BOOL)makeHost:(NSUInteger)userId;
        [Export("makeHost:")]
        bool MakeHost(nuint userId);

        // -(BOOL)removeUser:(NSUInteger)userId;
        [Export("removeUser:")]
        bool RemoveUser(nuint userId);

        // -(NSUInteger)myselfUserID;
        [Export("myselfUserID")]
        nuint MyselfUserID();

        // -(NSUInteger)activeUserID;
        [Export("activeUserID")]
        nuint ActiveUserID();

        // -(NSUInteger)activeShareUserID;
        [Export("activeShareUserID")]
        nuint ActiveShareUserID();

        // -(BOOL)isSameUser:(NSUInteger)user1 compareTo:(NSUInteger)user2;
        [Export("isSameUser:compareTo:")]
        bool IsSameUser(nuint user1, nuint user2);

        // -(BOOL)isHostUser:(NSUInteger)userID;
        [Export("isHostUser:")]
        bool IsHostUser(nuint userID);

        // -(BOOL)isMyself:(NSUInteger)userID;
        [Export("isMyself:")]
        bool IsMyself(nuint userID);

        // -(BOOL)raiseMyHand;
        [Export("raiseMyHand")]
        bool RaiseMyHand();

        // -(BOOL)lowerHand:(NSUInteger)userId;
        [Export("lowerHand:")]
        bool LowerHand(nuint userId);

        // -(BOOL)lowerAllHand;
        [Export("lowerAllHand")]
        bool LowerAllHand();

        // -(BOOL)claimHostWithHostKey:(NSString * _Nonnull)hostKey;
        [Export("claimHostWithHostKey:")]
        bool ClaimHostWithHostKey(string hostKey);

        // -(BOOL)assignCohost:(NSUInteger)userID;
        [Export("assignCohost:")]
        bool AssignCohost(nuint userID);

        // -(BOOL)revokeCoHost:(NSUInteger)userID;
        [Export("revokeCoHost:")]
        bool RevokeCoHost(nuint userID);

        // -(BOOL)canBeCoHost:(NSUInteger)userID;
        [Export("canBeCoHost:")]
        bool CanBeCoHost(nuint userID);
    }

    // @interface Chat (MobileRTCMeetingService)
    [Category]
    [BaseType(typeof(MobileRTCMeetingService))]
    interface MobileRTCMeetingService_Chat
    {
        // -(BOOL)isChatDisabled;
        [Export("isChatDisabled")]
        bool IsChatDisabled();

        // -(BOOL)isPrivateChatDisabled;
        [Export("isPrivateChatDisabled")]
        bool IsPrivateChatDisabled();

        // -(BOOL)changeAttendeeChatPriviledge:(MobileRTCMeetingChatPriviledgeType)type;
        [Export("changeAttendeeChatPriviledge:")]
        bool ChangeAttendeeChatPriviledge(MobileRTCMeetingChatPriviledgeType type);

        // -(MobileRTCMeetingChatPriviledgeType)getAttendeeChatPriviledge;
        [Export("getAttendeeChatPriviledge")]
        MobileRTCMeetingChatPriviledgeType AttendeeChatPriviledge();

        // -(MobileRTCMeetingChat * _Nullable)meetingChatByID:(NSString * _Nonnull)messageID;
        [Export("meetingChatByID:")]
        [return: NullAllowed]
        MobileRTCMeetingChat MeetingChatByID(string messageID);

        // -(MobileRTCSendChatError)sendChatToUser:(NSUInteger)userID WithContent:(NSString * _Nonnull)content;
        [Export("sendChatToUser:WithContent:")]
        MobileRTCSendChatError SendChatToUser(nuint userID, string content);

        // -(MobileRTCSendChatError)sendChatToGroup:(MobileRTCChatGroup)group WithContent:(NSString * _Nonnull)content;
        [Export("sendChatToGroup:WithContent:")]
        MobileRTCSendChatError SendChatToGroup(MobileRTCChatGroup group, string content);
    }

    // @interface MobileRTCQAAnswerItem : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCQAAnswerItem
    {
        // -(NSDate * _Nullable)getTime;
        [NullAllowed, Export("getTime")]
        NSDate Time { get; }

        // -(NSString * _Nullable)getText;
        [NullAllowed, Export("getText")]
        string Text { get; }

        // -(NSString * _Nullable)getSenderName;
        [NullAllowed, Export("getSenderName")]
        string SenderName { get; }

        // -(NSString * _Nullable)getQuestionId;
        [NullAllowed, Export("getQuestionId")]
        string QuestionId { get; }

        // -(NSString * _Nullable)getAnswerID;
        [NullAllowed, Export("getAnswerID")]
        string AnswerID { get; }

        // -(BOOL)isPrivate;
        [Export("isPrivate")]
        bool IsPrivate { get; }

        // -(BOOL)isLiveAnswer;
        [Export("isLiveAnswer")]
        bool IsLiveAnswer { get; }

        // -(BOOL)isSenderMyself;
        [Export("isSenderMyself")]
        bool IsSenderMyself { get; }
    }

    // @interface MobileRTCQAItem : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCQAItem
    {
        // -(NSString * _Nullable)getQuestionId;
        [NullAllowed, Export("getQuestionId")]
        string QuestionId { get; }

        // -(NSDate * _Nullable)getTime;
        [NullAllowed, Export("getTime")]
        NSDate Time { get; }

        // -(NSString * _Nullable)getText;
        [NullAllowed, Export("getText")]
        string Text { get; }

        // -(NSString * _Nullable)getSenderName;
        [NullAllowed, Export("getSenderName")]
        string SenderName { get; }

        // -(BOOL)isAnonymous;
        [Export("isAnonymous")]
        bool IsAnonymous { get; }

        // -(BOOL)isMarkedAsAnswered;
        [Export("isMarkedAsAnswered")]
        bool IsMarkedAsAnswered { get; }

        // -(BOOL)isMarkedAsDismissed;
        [Export("isMarkedAsDismissed")]
        bool IsMarkedAsDismissed { get; }

        // -(NSUInteger)getUpvoteNumber;
        [Export("getUpvoteNumber")]
        nuint UpvoteNumber { get; }

        // -(BOOL)getHasLiveAnswers;
        [Export("getHasLiveAnswers")]
        bool HasLiveAnswers { get; }

        // -(BOOL)getHasTextAnswers;
        [Export("getHasTextAnswers")]
        bool HasTextAnswers { get; }

        // -(BOOL)isMySelfUpvoted;
        [Export("isMySelfUpvoted")]
        bool IsMySelfUpvoted { get; }

        // -(BOOL)amILiveAnswering;
        [Export("amILiveAnswering")]
        bool AmILiveAnswering { get; }

        // -(BOOL)isLiveAnswering;
        [Export("isLiveAnswering")]
        bool IsLiveAnswering { get; }

        // -(NSString * _Nullable)getLiveAnswerName;
        [NullAllowed, Export("getLiveAnswerName")]
        string LiveAnswerName { get; }

        // -(BOOL)isSenderMyself;
        [Export("isSenderMyself")]
        bool IsSenderMyself { get; }

        // -(NSArray * _Nullable)getAnswerlist;
        [NullAllowed, Export("getAnswerlist")]
        NSObject[] Answerlist { get; }
    }

    // @interface Webinar (MobileRTCMeetingService)
    [Category]
    [BaseType(typeof(MobileRTCMeetingService))]
    interface MobileRTCMeetingService_Webinar
    {
        // -(BOOL)hasPromptAndDePromptPrivilige;
        [Export("hasPromptAndDePromptPrivilige")]
        bool HasPromptAndDePromptPrivilige();

        // -(BOOL)promptAttendee2Panelist:(NSUInteger)userID;
        [Export("promptAttendee2Panelist:")]
        bool PromptAttendee2Panelist(nuint userID);

        // -(BOOL)dePromptPanelist2Attendee:(NSUInteger)userID;
        [Export("dePromptPanelist2Attendee:")]
        bool DePromptPanelist2Attendee(nuint userID);

        // -(BOOL)allowAttendeeChat:(MobileRTCChatAllowAttendeeChat)privilegeType;
        [Export("allowAttendeeChat:")]
        bool AllowAttendeeChat(MobileRTCChatAllowAttendeeChat privilegeType);

        // -(BOOL)isAllowAttendeeTalk:(NSUInteger)userID;
        [Export("isAllowAttendeeTalk:")]
        bool IsAllowAttendeeTalk(nuint userID);

        // -(BOOL)allowAttenddeTalk:(NSUInteger)userID allow:(BOOL)enable;
        [Export("allowAttenddeTalk:allow:")]
        bool AllowAttenddeTalk(nuint userID, bool enable);

        // -(BOOL)isAllowPanelistStartVideo;
        [Export("isAllowPanelistStartVideo")]
        bool IsAllowPanelistStartVideo();

        // -(BOOL)allowPanelistStartVideo:(BOOL)enable;
        [Export("allowPanelistStartVideo:")]
        bool AllowPanelistStartVideo(bool enable);

        // -(BOOL)isAllowAskQuestionAnonymously;
        [Export("isAllowAskQuestionAnonymously")]
        bool IsAllowAskQuestionAnonymously();

        // -(BOOL)allowAskQuestionAnonymously:(BOOL)enable;
        [Export("allowAskQuestionAnonymously:")]
        bool AllowAskQuestionAnonymously(bool enable);

        // -(BOOL)isAllowAttendeeViewAllQuestion;
        [Export("isAllowAttendeeViewAllQuestion")]
        bool IsAllowAttendeeViewAllQuestion();

        // -(BOOL)allowAttendeeViewAllQuestion:(BOOL)enable;
        [Export("allowAttendeeViewAllQuestion:")]
        bool AllowAttendeeViewAllQuestion(bool enable);

        // -(BOOL)isAllowAttendeeUpVoteQuestion;       
        [Export("isAllowAttendeeUpVoteQuestion")]
        bool IsAllowAttendeeUpVoteQuestion();

        // -(BOOL)allowAttendeeUpVoteQuestion:(BOOL)enable;
        [Export("allowAttendeeUpVoteQuestion:")]
        bool AllowAttendeeUpVoteQuestion(bool enable);

        // -(BOOL)isAllowAttendeeAnswerQuestion __attribute__((deprecated("Had deprecated. Please use - (BOOL)isAllowCommentQuestion; instead")));
        [Export("isAllowAttendeeAnswerQuestion")]
        bool IsAllowAttendeeAnswerQuestion();

        // -(BOOL)allowAttendeeAnswerQuestion:(BOOL)enable __attribute__((deprecated("Had deprecated. Please use - (BOOL)allowCommentQuestion:(BOOL)enable; instead")));
        [Export("allowAttendeeAnswerQuestion:")]
        bool AllowAttendeeAnswerQuestion(bool enable);

        // -(BOOL)isAllowCommentQuestion;
        [Export("isAllowCommentQuestion")]
        bool IsAllowCommentQuestion();

        // -(BOOL)allowCommentQuestion:(BOOL)enable;
        [Export("allowCommentQuestion:")]
        bool AllowCommentQuestion(bool enable);

        // -(NSArray * _Nullable)getAllQuestionList;        
        [Export("getAllQuestionList")]
        NSObject[] AllQuestionList();

        // -(NSArray * _Nullable)getMyQuestionList;
        [Export("getMyQuestionList")]
        NSObject[] MyQuestionList();

        // -(NSArray * _Nullable)getOpenQuestionList;
        [Export("getOpenQuestionList")]
        NSObject[] OpenQuestionList();

        // -(NSArray * _Nullable)getDismissedQuestionList;
        [Export("getDismissedQuestionList")]
        NSObject[] DismissedQuestionList();

        // -(NSArray * _Nullable)getAnsweredQuestionList;
        [Export("getAnsweredQuestionList")]
        NSObject[] AnsweredQuestionList();

        // -(int)getALLQuestionCount;        
        [Export("getALLQuestionCount")]
        int ALLQuestionCount();

        // -(int)getMyQuestionCount;
        [Export("getMyQuestionCount")]
        int MyQuestionCount();

        // -(int)getOpenQuestionCount;
        [Export("getOpenQuestionCount")]
        int OpenQuestionCount();

        // -(int)getDismissedQuestionCount;
        [Export("getDismissedQuestionCount")]
        int DismissedQuestionCount();

        // -(int)getAnsweredQuestionCount;        
        [Export("getAnsweredQuestionCount")]
        int AnsweredQuestionCount();

        // -(MobileRTCQAItem * _Nullable)getQuestion:(NSString * _Nonnull)questionID;
        [Export("getQuestion:")]
        [return: NullAllowed]
        MobileRTCQAItem GetQuestion(string questionID);

        // -(MobileRTCQAAnswerItem * _Nullable)getAnswer:(NSString * _Nonnull)answerID;
        [Export("getAnswer:")]
        [return: NullAllowed]
        MobileRTCQAAnswerItem GetAnswer(string answerID);

        // -(BOOL)addQuestion:(NSString * _Nonnull)content anonymous:(BOOL)anonymous;
        [Export("addQuestion:anonymous:")]
        bool AddQuestion(string content, bool anonymous);

        // -(BOOL)answerQuestionPrivate:(NSString * _Nonnull)questionID answerContent:(NSString * _Nonnull)answerContent;
        [Export("answerQuestionPrivate:answerContent:")]
        bool AnswerQuestionPrivate(string questionID, string answerContent);

        // -(BOOL)answerQuestionPublic:(NSString * _Nonnull)questionID answerContent:(NSString * _Nonnull)answerContent;
        [Export("answerQuestionPublic:answerContent:")]
        bool AnswerQuestionPublic(string questionID, string answerContent);

        // -(BOOL)commentQuestion:(NSString * _Nonnull)questionID commentContent:(NSString * _Nonnull)commentContent;
        [Export("commentQuestion:commentContent:")]
        bool CommentQuestion(string questionID, string commentContent);

        // -(BOOL)dismissQuestion:(NSString * _Nonnull)questionID;
        [Export("dismissQuestion:")]
        bool DismissQuestion(string questionID);

        // -(BOOL)reopenQuestion:(NSString * _Nonnull)questionID;
        [Export("reopenQuestion:")]
        bool ReopenQuestion(string questionID);

        // -(BOOL)voteupQuestion:(NSString * _Nonnull)questionID voteup:(BOOL)voteup;
        [Export("voteupQuestion:voteup:")]
        bool VoteupQuestion(string questionID, bool voteup);

        // -(BOOL)startLiving:(NSString * _Nonnull)questionID;
        [Export("startLiving:")]
        bool StartLiving(string questionID);

        // -(BOOL)endLiving:(NSString * _Nonnull)questionID;
        [Export("endLiving:")]
        bool EndLiving(string questionID);
    }

    // @interface ZoomSDKVirtualBGImageInfo : NSObject
    [Protocol]
    [BaseType(typeof(NSObject))]
    interface ZoomSDKVirtualBGImageInfo
    {
        // @property (assign, nonatomic) BOOL isNone;
        [Export("isNone")]
        bool IsNone { get; set; }

        // @property (assign, nonatomic) BOOL isSelect;
        [Export("isSelect")]
        bool IsSelect { get; set; }

        // @property (retain, nonatomic) NSString * _Nullable imagePath;
        [NullAllowed, Export("imagePath", ArgumentSemantic.Retain)]
        string ImagePath { get; set; }
    }

    // @interface VirtualBackground (MobileRTCMeetingService)
    [Category]
    [BaseType(typeof(MobileRTCMeetingService))]
    interface MobileRTCMeetingService_VirtualBackground
    {
        // @property (retain, nonatomic) UIView * _Nullable previewView;
        [Export("previewView", ArgumentSemantic.Retain)]
        UIView PreviewView();

        [Export ("setPreviewView:")]
        void PreviewView(UIView value);

        // -(BOOL)startPreviewWithFrame:(CGRect)frame;
        [Export("startPreviewWithFrame:")]
        bool StartPreviewWithFrame(CGRect frame);

        // -(BOOL)isSupportVirtualBG;
        [Export("isSupportVirtualBG")]
        bool IsSupportVirtualBG();

        // -(BOOL)isSupportSmartVirtualBG;
        [Export("isSupportSmartVirtualBG")]
        bool IsSupportSmartVirtualBG();

        // -(NSArray * _Nonnull)getBGImageList;
        [Export("getBGImageList")]
        NSObject[] BGImageList();

        // -(MobileRTCMeetError)addBGImage:(UIImage * _Nonnull)image;
        [Export("addBGImage:")]
        MobileRTCMeetError AddBGImage(UIImage image);

        // -(MobileRTCMeetError)removeBGImage:(ZoomSDKVirtualBGImageInfo * _Nonnull)bgImageInfo;
        [Export("removeBGImage:")]
        MobileRTCMeetError RemoveBGImage(ZoomSDKVirtualBGImageInfo bgImageInfo);

        // -(MobileRTCMeetError)useBGImage:(ZoomSDKVirtualBGImageInfo * _Nonnull)bgImage;
        [Export("useBGImage:")]
        MobileRTCMeetError UseBGImage(ZoomSDKVirtualBGImageInfo bgImage);

        // -(MobileRTCMeetError)useNoneImage;
        [Export("useNoneImage")]
        MobileRTCMeetError UseNoneImage();

        // -(BOOL)isUsingGreenVB;
        [Export("isUsingGreenVB")]
        bool IsUsingGreenVB();

        // -(MobileRTCMeetError)enableGreenVB:(BOOL)enable;
        [Export("enableGreenVB:")]
        MobileRTCMeetError EnableGreenVB(bool enable);

        // -(MobileRTCMeetError)selectGreenVBPoint:(CGPoint)point;
        [Export("selectGreenVBPoint:")]
        MobileRTCMeetError SelectGreenVBPoint(CGPoint point);
    }

    // @interface BO (MobileRTCMeetingService)
    [Category]
    [BaseType(typeof(MobileRTCMeetingService))]
    interface MobileRTCMeetingService_BO
    {
        // -(MobileRTCBOCreator * _Nullable)getCreatorHelper;
        [Export("getCreatorHelper")]
        MobileRTCBOCreator CreatorHelper();

        // -(MobileRTCBOAdmin * _Nullable)getAdminHelper;
        [Export("getAdminHelper")]
        MobileRTCBOAdmin AdminHelper();

        // -(MobileRTCBOAssistant * _Nullable)getAssistantHelper;
        [Export("getAssistantHelper")]
        MobileRTCBOAssistant AssistantHelper();

        // -(MobileRTCBOAttendee * _Nullable)getAttedeeHelper;
        [Export("getAttedeeHelper")]
        MobileRTCBOAttendee AttedeeHelper();

        // -(MobileRTCBOData * _Nullable)getDataHelper;
        [Export("getDataHelper")]
        MobileRTCBOData DataHelper();

        // -(BOOL)isMasterMeetingHost;
        [Export("isMasterMeetingHost")]
        bool IsMasterMeetingHost();

        // -(BOOL)isBOMeetingStarted;
        [Export("isBOMeetingStarted")]
        bool IsBOMeetingStarted();

        // -(BOOL)isBOMeetingEnabled;
        [Export("isBOMeetingEnabled")]
        bool IsBOMeetingEnabled();

        // -(BOOL)isInBOMeeting;
        [Export("isInBOMeeting")]
        bool IsInBOMeeting();
    }

    // @interface MobileRTCMeetingSettings : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCMeetingSettings
    {
        // @property (assign, nonatomic) BOOL meetingTitleHidden;
        [Export("meetingTitleHidden")]
        bool MeetingTitleHidden { get; set; }

        // @property (assign, nonatomic) BOOL meetingPasswordHidden;
        [Export("meetingPasswordHidden")]
        bool MeetingPasswordHidden { get; set; }

        // @property (assign, nonatomic) BOOL meetingLeaveHidden;
        [Export("meetingLeaveHidden")]
        bool MeetingLeaveHidden { get; set; }

        // @property (assign, nonatomic) BOOL meetingAudioHidden;
        [Export("meetingAudioHidden")]
        bool MeetingAudioHidden { get; set; }

        // @property (assign, nonatomic) BOOL meetingVideoHidden;
        [Export("meetingVideoHidden")]
        bool MeetingVideoHidden { get; set; }

        // @property (assign, nonatomic) BOOL meetingInviteHidden;
        [Export("meetingInviteHidden")]
        bool MeetingInviteHidden { get; set; }

        // @property (assign, nonatomic) BOOL meetingChatHidden;
        [Export("meetingChatHidden")]
        bool MeetingChatHidden { get; set; }

        // @property (assign, nonatomic) BOOL meetingParticipantHidden;
        [Export("meetingParticipantHidden")]
        bool MeetingParticipantHidden { get; set; }

        // @property (assign, nonatomic) BOOL meetingShareHidden;
        [Export("meetingShareHidden")]
        bool MeetingShareHidden { get; set; }

        // @property (assign, nonatomic) BOOL meetingMoreHidden;
        [Export("meetingMoreHidden")]
        bool MeetingMoreHidden { get; set; }

        // @property (assign, nonatomic) BOOL topBarHidden;
        [Export("topBarHidden")]
        bool TopBarHidden { get; set; }

        // @property (assign, nonatomic) BOOL bottomBarHidden;
        [Export("bottomBarHidden")]
        bool BottomBarHidden { get; set; }

        // @property (assign, nonatomic) BOOL disconnectAudioHidden;
        [Export("disconnectAudioHidden")]
        bool DisconnectAudioHidden { get; set; }

        // @property (assign, nonatomic) BOOL enableKubi;
        [Export("enableKubi")]
        bool EnableKubi { get; set; }

        // @property (assign, nonatomic) BOOL thumbnailInShare;
        [Export("thumbnailInShare")]
        bool ThumbnailInShare { get; set; }

        // @property (assign, nonatomic) BOOL hostLeaveHidden;
        [Export("hostLeaveHidden")]
        bool HostLeaveHidden { get; set; }

        // @property (assign, nonatomic) BOOL hintHidden;
        [Export("hintHidden")]
        bool HintHidden { get; set; }

        // @property (assign, nonatomic) BOOL waitingHUDHidden;
        [Export("waitingHUDHidden")]
        bool WaitingHUDHidden { get; set; }

        // @property (assign, nonatomic) BOOL callinRoomSystemHidden;
        [Export("callinRoomSystemHidden")]
        bool CallinRoomSystemHidden { get; set; }

        // @property (assign, nonatomic) BOOL calloutRoomSystemHidden;
        [Export("calloutRoomSystemHidden")]
        bool CalloutRoomSystemHidden { get; set; }

        // @property (assign, nonatomic) BOOL claimHostWithHostKeyHidden;
        [Export("claimHostWithHostKeyHidden")]
        bool ClaimHostWithHostKeyHidden { get; set; }

        // @property (assign, nonatomic) BOOL closeCaptionHidden;
        [Export("closeCaptionHidden")]
        bool CloseCaptionHidden { get; set; }

        // @property (assign, nonatomic) BOOL qaButtonHidden;
        [Export("qaButtonHidden")]
        bool QaButtonHidden { get; set; }

        // @property (assign, nonatomic) BOOL proximityMonitoringDisable;
        [Export("proximityMonitoringDisable")]
        bool ProximityMonitoringDisable { get; set; }

        // @property (assign, nonatomic) BOOL enableCustomMeeting;
        [Export("enableCustomMeeting")]
        bool EnableCustomMeeting { get; set; }

        // -(BOOL)autoConnectInternetAudio;
        // -(void)setAutoConnectInternetAudio:(BOOL)connected;
        [Export("autoConnectInternetAudio")]
        bool AutoConnectInternetAudio { get; set; }

        // -(BOOL)muteAudioWhenJoinMeeting;
        [Export("muteAudioWhenJoinMeeting")]
        bool MuteAudioWhenJoinMeeting();

        // -(void)setMuteAudioWhenJoinMeeting:(BOOL)muted;
        [Export("setMuteAudioWhenJoinMeeting:")]
        void SetMuteAudioWhenJoinMeeting(bool muted);

        // -(BOOL)muteVideoWhenJoinMeeting;
        [Export("muteVideoWhenJoinMeeting")]
        bool MuteVideoWhenJoinMeeting();

        // -(void)setMuteVideoWhenJoinMeeting:(BOOL)muted;
        [Export("setMuteVideoWhenJoinMeeting:")]
        void SetMuteVideoWhenJoinMeeting(bool muted);

        // -(BOOL)faceBeautyEnabled;
        [Export("faceBeautyEnabled")]
        bool FaceBeautyEnabled();

        // -(void)setFaceBeautyEnabled:(BOOL)enable;
        [Export("setFaceBeautyEnabled:")]
        void SetFaceBeautyEnabled(bool enable);

        // -(BOOL)driveModeDisabled;
        [Export("driveModeDisabled")]
        bool DriveModeDisabled();

        // -(void)disableDriveMode:(BOOL)disabled;
        [Export("disableDriveMode:")]
        void DisableDriveMode(bool disabled);

        // -(BOOL)galleryViewDisabled;
        [Export("galleryViewDisabled")]
        bool GalleryViewDisabled();

        // -(void)disableGalleryView:(BOOL)disabled;
        [Export("disableGalleryView:")]
        void DisableGalleryView(bool disabled);

        // -(BOOL)callInDisabled;
        [Export("callInDisabled")]
        bool CallInDisabled();

        // -(void)disableCallIn:(BOOL)disabled;
        [Export("disableCallIn:")]
        void DisableCallIn(bool disabled);

        // -(BOOL)callOutDisabled;
        [Export("callOutDisabled")]
        bool CallOutDisabled();

        // -(void)disableCallOut:(BOOL)disabled;
        [Export("disableCallOut:")]
        void DisableCallOut(bool disabled);

        // -(BOOL)minimizeMeetingDisabled;
        [Export("minimizeMeetingDisabled")]
        bool MinimizeMeetingDisabled();

        // -(void)disableMinimizeMeeting:(BOOL)disabled;
        [Export("disableMinimizeMeeting:")]
        void DisableMinimizeMeeting(bool disabled);

        // -(BOOL)speakerOffWhenInMeeting;
        [Export("speakerOffWhenInMeeting")]
        bool SpeakerOffWhenInMeeting();

        // -(void)setSpeakerOffWhenInMeeting:(BOOL)speakerOff;
        [Export("setSpeakerOffWhenInMeeting:")]
        void SetSpeakerOffWhenInMeeting(bool speakerOff);

        // -(BOOL)showMyMeetingElapseTime;
        [Export("showMyMeetingElapseTime")]
        bool ShowMyMeetingElapseTime();

        // -(void)enableShowMyMeetingElapseTime:(BOOL)enable;
        [Export("enableShowMyMeetingElapseTime:")]
        void EnableShowMyMeetingElapseTime(bool enable);

        // -(void)hideReactionsOnMeetingUI:(BOOL)hidden;
        [Export("hideReactionsOnMeetingUI:")]
        void HideReactionsOnMeetingUI(bool hidden);

        // -(void)prePopulateWebinarRegistrationInfo:(NSString * _Nonnull)email username:(NSString * _Nonnull)username;
        [Export("prePopulateWebinarRegistrationInfo:username:")]
        void PrePopulateWebinarRegistrationInfo(string email, string username);
    }

    // @interface MobileRTCInviteHelper : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCInviteHelper
    {
        // @property (readonly, retain, nonatomic) NSString * _Nonnull ongoingMeetingNumber;
        [Export("ongoingMeetingNumber", ArgumentSemantic.Retain)]
        string OngoingMeetingNumber { get; }

        // @property (readonly, retain, nonatomic) NSString * _Nonnull ongoingMeetingID;
        [Export("ongoingMeetingID", ArgumentSemantic.Retain)]
        string OngoingMeetingID { get; }

        // @property (readonly, retain, nonatomic) NSString * _Nonnull ongoingMeetingTopic;
        [Export("ongoingMeetingTopic", ArgumentSemantic.Retain)]
        string OngoingMeetingTopic { get; }

        // @property (readonly, retain, nonatomic) NSDate * _Nonnull ongoingMeetingStartTime;
        [Export("ongoingMeetingStartTime", ArgumentSemantic.Retain)]
        NSDate OngoingMeetingStartTime { get; }

        // @property (readonly, assign, nonatomic) BOOL ongoingRecurringMeeting;
        [Export("ongoingRecurringMeeting")]
        bool OngoingRecurringMeeting { get; }

        // @property (readonly, retain, nonatomic) NSString * _Nonnull joinMeetingURL;
        [Export("joinMeetingURL", ArgumentSemantic.Retain)]
        string JoinMeetingURL { get; }

        // @property (readonly, retain, nonatomic) NSString * _Nonnull meetingPassword;
        [Export("meetingPassword", ArgumentSemantic.Retain)]
        string MeetingPassword { get; }

        // @property (readonly, retain, nonatomic) NSString * _Nonnull rawMeetingPassword;
        [Export("rawMeetingPassword", ArgumentSemantic.Retain)]
        string RawMeetingPassword { get; }

        // @property (readonly, retain, nonatomic) NSString * _Nonnull tollCallInNumber;
        [Export("tollCallInNumber", ArgumentSemantic.Retain)]
        string TollCallInNumber { get; }

        // @property (readonly, retain, nonatomic) NSString * _Nonnull tollFreeCallInNumber;
        [Export("tollFreeCallInNumber", ArgumentSemantic.Retain)]
        string TollFreeCallInNumber { get; }

        // @property (assign, nonatomic) BOOL disableInviteSMS;
        [Export("disableInviteSMS")]
        bool DisableInviteSMS { get; set; }

        // @property (retain, nonatomic) NSString * _Nonnull inviteSMS;
        [Export("inviteSMS", ArgumentSemantic.Retain)]
        string InviteSMS { get; set; }

        // @property (assign, nonatomic) BOOL disableCopyURL;
        [Export("disableCopyURL")]
        bool DisableCopyURL { get; set; }

        // @property (retain, nonatomic) NSString * _Nonnull inviteCopyURL;
        [Export("inviteCopyURL", ArgumentSemantic.Retain)]
        string InviteCopyURL { get; set; }

        // @property (assign, nonatomic) BOOL disableInviteEmail;
        [Export("disableInviteEmail")]
        bool DisableInviteEmail { get; set; }

        // @property (retain, nonatomic) NSString * _Nonnull inviteEmailSubject;
        [Export("inviteEmailSubject", ArgumentSemantic.Retain)]
        string InviteEmailSubject { get; set; }

        // @property (retain, nonatomic) NSString * _Nonnull inviteEmailContent;
        [Export("inviteEmailContent", ArgumentSemantic.Retain)]
        string InviteEmailContent { get; set; }

        // +(MobileRTCInviteHelper * _Nonnull)sharedInstance;
        [Static]
        [Export("sharedInstance")]
        MobileRTCInviteHelper SharedInstance { get; }
    }

    // @interface MobileRTCDialinCountry : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCDialinCountry
    {
        // @property (retain, nonatomic) NSMutableArray * _Nonnull selectedCountries;
        [Export("selectedCountries", ArgumentSemantic.Retain)]
        NSMutableArray SelectedCountries { get; set; }

        // @property (retain, nonatomic) NSMutableArray * _Nonnull allCountries;
        [Export("allCountries", ArgumentSemantic.Retain)]
        NSMutableArray AllCountries { get; set; }

        // @property (assign, nonatomic) BOOL isIncludedTollfree;
        [Export("isIncludedTollfree")]
        bool IsIncludedTollfree { get; set; }

        // @property (retain, nonatomic) NSString * _Nonnull hash;
        [Export("hash", ArgumentSemantic.Retain)]
        string Hash { get; set; }
    }

    // @interface MobileRTCPremeetingService : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCPremeetingService
    {
        [Wrap("WeakDelegate")]
        [NullAllowed]
        MobileRTCPremeetingDelegate Delegate { get; set; }

        // @property (assign, nonatomic) id<MobileRTCPremeetingDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // -(id<MobileRTCMeetingItem> _Nullable)createMeetingItem;
        [NullAllowed, Export("createMeetingItem")]
        MobileRTCMeetingItem CreateMeetingItem { get; }

        // -(id<MobileRTCMeetingItem> _Nullable)cloneMeetingItem:(id<MobileRTCMeetingItem> _Nonnull)item;
        [Export("cloneMeetingItem:")]
        [return: NullAllowed]
        MobileRTCMeetingItem CloneMeetingItem(MobileRTCMeetingItem item);

        // -(void)destroyMeetingItem:(id<MobileRTCMeetingItem> _Nonnull)item;
        [Export("destroyMeetingItem:")]
        void DestroyMeetingItem(MobileRTCMeetingItem item);

        // -(id<MobileRTCMeetingItem> _Nullable)getMeetingItemByUniquedID:(unsigned long long)meetingUniquedID;
        [Export("getMeetingItemByUniquedID:")]
        [return: NullAllowed]
        MobileRTCMeetingItem GetMeetingItemByUniquedID(ulong meetingUniquedID);

        // -(BOOL)scheduleMeeting:(id<MobileRTCMeetingItem> _Nonnull)meetingItem WithScheduleFor:(NSString * _Nullable)userEmail;
        [Export("scheduleMeeting:WithScheduleFor:")]
        bool ScheduleMeeting(MobileRTCMeetingItem meetingItem, [NullAllowed] string userEmail);

        // -(BOOL)editMeeting:(id<MobileRTCMeetingItem> _Nonnull)meetingItem;
        [Export("editMeeting:")]
        bool EditMeeting(MobileRTCMeetingItem meetingItem);

        // -(BOOL)deleteMeeting:(id<MobileRTCMeetingItem> _Nonnull)meetingItem;
        [Export("deleteMeeting:")]
        bool DeleteMeeting(MobileRTCMeetingItem meetingItem);

        // -(BOOL)listMeeting;
        [Export("listMeeting")]
        bool ListMeeting { get; }

        // -(MobileRTCDialinCountry * _Nullable)getAvailableDialInCountry;
        [NullAllowed, Export("getAvailableDialInCountry")]
        MobileRTCDialinCountry AvailableDialInCountry { get; }
    }

    // @protocol MobileRTCMeetingItem <NSObject>
    /*
      Check whether adding [Model] to this declaration is appropriate.
      [Model] is used to generate a C# class that implements this protocol,
      and might be useful for protocols that consumers are supposed to implement,
      since consumers can subclass the generated class instead of implementing
      the generated interface. If consumers are not supposed to implement this
      protocol, then [Model] is redundant and will generate code that will never
      be used.
    */
    [Protocol]
    [BaseType(typeof(NSObject))]
    interface MobileRTCMeetingItem
    {
        // @required -(unsigned long long)getMeetingUniquedID;
        [Abstract]
        [Export("getMeetingUniquedID")]
        ulong MeetingUniquedID { get; }

        // @required -(void)setMeetingTopic:(NSString * _Nonnull)topic;
        [Abstract]
        [Export("setMeetingTopic:")]
        void SetMeetingTopic(string topic);

        // @required -(NSString * _Nullable)getMeetingTopic;
        [Abstract]
        [NullAllowed, Export("getMeetingTopic")]
        string MeetingTopic { get; }

        // @required -(void)setMeetingID:(NSString * _Nonnull)mid;
        [Abstract]
        [Export("setMeetingID:")]
        void SetMeetingID(string mid);

        // @required -(NSString * _Nullable)getMeetingID;
        [Abstract]
        [NullAllowed, Export("getMeetingID")]
        string MeetingID { get; }

        // @required -(void)setMeetingNumber:(unsigned long long)number;
        [Abstract]
        [Export("setMeetingNumber:")]
        void SetMeetingNumber(ulong number);

        // @required -(unsigned long long)getMeetingNumber;
        [Abstract]
        [Export("getMeetingNumber")]
        ulong MeetingNumber { get; }

        // @required -(void)setMeetingPassword:(NSString * _Nonnull)password;
        [Abstract]
        [Export("setMeetingPassword:")]
        void SetMeetingPassword(string password);

        // @required -(NSString * _Nullable)getMeetingPassword;
        [Abstract]
        [NullAllowed, Export("getMeetingPassword")]
        string MeetingPassword { get; }

        // @required -(void)setTimeZoneID:(NSString * _Nonnull)tzID;
        [Abstract]
        [Export("setTimeZoneID:")]
        void SetTimeZoneID(string tzID);

        // @required -(NSString * _Nullable)getTimeZoneID;
        [Abstract]
        [NullAllowed, Export("getTimeZoneID")]
        string TimeZoneID { get; }

        // @required -(void)setStartTime:(NSDate * _Nonnull)startTime;
        [Abstract]
        [Export("setStartTime:")]
        void SetStartTime(NSDate startTime);

        // @required -(NSDate * _Nullable)getStartTime;
        [Abstract]
        [NullAllowed, Export("getStartTime")]
        NSDate StartTime { get; }

        // @required -(void)setDurationInMinutes:(NSUInteger)duration;
        [Abstract]
        [Export("setDurationInMinutes:")]
        void SetDurationInMinutes(nuint duration);

        // @required -(NSUInteger)getDurationInMinutes;
        [Abstract]
        [Export("getDurationInMinutes")]
        nuint DurationInMinutes { get; }

        // @required -(BOOL)isRecurringMeeting;
        [Abstract]
        [Export("isRecurringMeeting")]
        bool IsRecurringMeeting { get; }

        // @required -(void)setMeetingRepeat:(MeetingRepeat)repeat;
        [Abstract]
        [Export("setMeetingRepeat:")]
        void SetMeetingRepeat(MeetingRepeat repeat);

        // @required -(MeetingRepeat)getMeetingRepeat;
        [Abstract]
        [Export("getMeetingRepeat")]
        MeetingRepeat MeetingRepeat { get; }

        // @required -(void)setRepeatEndDate:(NSDate * _Nonnull)endDate;
        [Abstract]
        [Export("setRepeatEndDate:")]
        void SetRepeatEndDate(NSDate endDate);

        // @required -(NSDate * _Nullable)getRepeatEndDate;
        [Abstract]
        [NullAllowed, Export("getRepeatEndDate")]
        NSDate RepeatEndDate { get; }

        // @required -(void)turnOffVideoForHost:(BOOL)turnOff;
        [Abstract]
        [Export("turnOffVideoForHost:")]
        void TurnOffVideoForHost(bool turnOff);

        // @required -(BOOL)isHostVideoOff;
        [Abstract]
        [Export("isHostVideoOff")]
        bool IsHostVideoOff { get; }

        // @required -(void)turnOffVideoForAttendee:(BOOL)turnOff;
        [Abstract]
        [Export("turnOffVideoForAttendee:")]
        void TurnOffVideoForAttendee(bool turnOff);

        // @required -(BOOL)isAttendeeVideoOff;
        [Abstract]
        [Export("isAttendeeVideoOff")]
        bool IsAttendeeVideoOff { get; }

        // @required -(void)setAllowJoinBeforeHost:(BOOL)allow;
        [Abstract]
        [Export("setAllowJoinBeforeHost:")]
        void SetAllowJoinBeforeHost(bool allow);

        // @required -(BOOL)canJoinBeforeHost;
        [Abstract]
        [Export("canJoinBeforeHost")]
        bool CanJoinBeforeHost { get; }

        // @required -(void)setUsePMIAsMeetingID:(BOOL)usePMI;
        [Abstract]
        [Export("setUsePMIAsMeetingID:")]
        void SetUsePMIAsMeetingID(bool usePMI);

        // @required -(BOOL)isUsePMIAsMeetingID;
        [Abstract]
        [Export("isUsePMIAsMeetingID")]
        bool IsUsePMIAsMeetingID { get; }

        // @required -(void)enableWaitingRoom:(BOOL)enable;
        [Abstract]
        [Export("enableWaitingRoom:")]
        void EnableWaitingRoom(bool enable);

        // @required -(BOOL)isWaitingRoomEnabled;
        [Abstract]
        [Export("isWaitingRoomEnabled")]
        bool IsWaitingRoomEnabled { get; }

        // @required -(void)enableMeetingToPublic:(BOOL)enable;
        [Abstract]
        [Export("enableMeetingToPublic:")]
        void EnableMeetingToPublic(bool enable);

        // @required -(BOOL)isMeetingToPublicEnabled;
        [Abstract]
        [Export("isMeetingToPublicEnabled")]
        bool IsMeetingToPublicEnabled { get; }

        // @required -(void)enableLanguageInterpretation:(BOOL)enable;
        [Abstract]
        [Export("enableLanguageInterpretation:")]
        void EnableLanguageInterpretation(bool enable);

        // @required -(BOOL)isLanguageInterpretationEnabled;
        [Abstract]
        [Export("isLanguageInterpretationEnabled")]
        bool IsLanguageInterpretationEnabled { get; }

        // @required -(void)setAlternativeHostList:(NSArray * _Nonnull)hostList;
        [Abstract]
        [Export("setAlternativeHostList:")]
        void SetAlternativeHostList(NSObject[] hostList);

        // @required -(NSArray * _Nullable)getAlternativeHostInfoList;
        [Abstract]
        [NullAllowed, Export("getAlternativeHostInfoList")]
        NSObject[] AlternativeHostInfoList { get; }

        // @required -(BOOL)setAudioOption:(MobileRTCMeetingItemAudioType)audioOption;
        [Abstract]
        [Export("setAudioOption:")]
        bool SetAudioOption(MobileRTCMeetingItemAudioType audioOption);

        // @required -(MobileRTCMeetingItemAudioType)getAduioOption;
        [Abstract]
        [Export("getAduioOption")]
        MobileRTCMeetingItemAudioType AduioOption { get; }

        // @required -(BOOL)isPersonalMeeting;
        [Abstract]
        [Export("isPersonalMeeting")]
        bool IsPersonalMeeting { get; }

        // @required -(BOOL)isWebinarMeeting;
        [Abstract]
        [Export("isWebinarMeeting")]
        bool IsWebinarMeeting { get; }

        // @required -(NSString * _Nullable)getInviteEmailContent;
        [Abstract]
        [NullAllowed, Export("getInviteEmailContent")]
        string InviteEmailContent { get; }

        // @required -(BOOL)setOnlyAllowSignedInUserJoinMeeting:(BOOL)on;
        [Abstract]
        [Export("setOnlyAllowSignedInUserJoinMeeting:")]
        bool SetOnlyAllowSignedInUserJoinMeeting(bool on);

        // @required -(BOOL)setAvailableDialinCountry:(MobileRTCDialinCountry * _Nonnull)dialinCountry;
        [Abstract]
        [Export("setAvailableDialinCountry:")]
        bool SetAvailableDialinCountry(MobileRTCDialinCountry dialinCountry);

        // @required -(MobileRTCDialinCountry * _Nullable)getAvailableDialInCountry;
        [Abstract]
        [NullAllowed, Export("getAvailableDialInCountry")]
        MobileRTCDialinCountry AvailableDialInCountry { get; }

        // @required -(BOOL)isOnlyAllowSignedInUserJoinMeeting;
        [Abstract]
        [Export("isOnlyAllowSignedInUserJoinMeeting")]
        bool IsOnlyAllowSignedInUserJoinMeeting { get; }

        // @required -(BOOL)set3rdPartyAudioInfo:(NSString * _Nonnull)description;
        [Abstract]
        [Export("set3rdPartyAudioInfo:")]
        bool Set3rdPartyAudioInfo(string description);

        // @required -(NSString * _Nullable)get3rdPartyAudioInfo;
        [Abstract]
        [NullAllowed, Export("get3rdPartyAudioInfo")]
        string ThirdPartyAudioInfo { get; }

        // @required -(NSString * _Nullable)getScheduleForUserEmail;
        [Abstract]
        [NullAllowed, Export("getScheduleForUserEmail")]
        string ScheduleForUserEmail { get; }

        // @required -(BOOL)setRecordType:(MobileRTCMeetingItemRecordType)recordType;
        [Abstract]
        [Export("setRecordType:")]
        bool SetRecordType(MobileRTCMeetingItemRecordType recordType);

        // @required -(MobileRTCMeetingItemRecordType)getRecordType;
        [Abstract]
        [Export("getRecordType")]
        MobileRTCMeetingItemRecordType RecordType { get; }

        // @required -(BOOL)setSpecifiedDomain:(NSArray * _Nullable)domain;
        [Abstract]
        [Export("setSpecifiedDomain:")]
        bool SetSpecifiedDomain([NullAllowed] NSObject[] domain);

        // @required -(NSArray * _Nullable)getSpecifiedDomain;
        [Abstract]
        [NullAllowed, Export("getSpecifiedDomain")]
        NSObject[] SpecifiedDomain { get; }
    }

    // @interface MobileRTCAlternativeHostInfo : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCAlternativeHostInfo
    {
        // @property (retain, nonatomic) NSString * _Nullable email;
        [NullAllowed, Export("email", ArgumentSemantic.Retain)]
        string Email { get; set; }
    }

    // @protocol MobileRTCPremeetingDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MobileRTCPremeetingDelegate
    {
        // @required -(void)sinkSchedultMeeting:(PreMeetingError)result MeetingUniquedID:(unsigned long long)uniquedID;
        [Abstract]
        [Export("sinkSchedultMeeting:MeetingUniquedID:")]
        void SinkSchedultMeeting(PreMeetingError result, ulong uniquedID);

        // @required -(void)sinkEditMeeting:(PreMeetingError)result MeetingUniquedID:(unsigned long long)uniquedID;
        [Abstract]
        [Export("sinkEditMeeting:MeetingUniquedID:")]
        void SinkEditMeeting(PreMeetingError result, ulong uniquedID);

        // @required -(void)sinkDeleteMeeting:(PreMeetingError)result;
        [Abstract]
        [Export("sinkDeleteMeeting:")]
        void SinkDeleteMeeting(PreMeetingError result);

        // @required -(void)sinkListMeeting:(PreMeetingError)result withMeetingItems:(NSArray * _Nonnull)array;
        [Abstract]
        [Export("sinkListMeeting:withMeetingItems:")]
        void SinkListMeeting(PreMeetingError result, NSObject[] array);
    }

    // @interface MobileRTCE2EMeetingKey : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCE2EMeetingKey
    {
        // @property (assign, readwrite, nonatomic) MobileRTCComponentType type;
        [Export("type", ArgumentSemantic.Assign)]
        MobileRTCComponentType Type { get; set; }

        // @property (readwrite, retain, nonatomic) NSData * _Nonnull meetingKey;
        [Export("meetingKey", ArgumentSemantic.Retain)]
        NSData MeetingKey { get; set; }

        // @property (readwrite, retain, nonatomic) NSData * _Nonnull meetingIv;
        [Export("meetingIv", ArgumentSemantic.Retain)]
        NSData MeetingIv { get; set; }
    }

    // @interface MobileRTCVideoView : UIView
    [BaseType(typeof(UIView))]
    [Protocol]
    interface MobileRTCVideoView
    {
        // -(NSInteger)getUserID;
        [Export("getUserID")]
        nint UserID { get; }

        // -(BOOL)showAttendeeVideoWithUserID:(NSUInteger)userID;
        [Export("showAttendeeVideoWithUserID:")]
        bool ShowAttendeeVideoWithUserID(nuint userID);

        // -(void)stopAttendeeVideo;
        [Export("stopAttendeeVideo")]
        void StopAttendeeVideo();

        // -(void)setVideoAspect:(MobileRTCVideoAspect)aspect;
        [Export("setVideoAspect:")]
        void SetVideoAspect(MobileRTCVideoAspect aspect);
    }

    // @interface MobileRTCPreviewVideoView : MobileRTCVideoView
    [BaseType(typeof(MobileRTCVideoView))]
    [Protocol]
    interface MobileRTCPreviewVideoView
    {
    }

    // @interface MobileRTCActiveVideoView : MobileRTCVideoView
    [BaseType(typeof(MobileRTCVideoView))]
    [Protocol]
    interface MobileRTCActiveVideoView
    {
    }

    // @interface MobileRTCActiveShareView : MobileRTCVideoView
    [BaseType(typeof(MobileRTCVideoView))]
    [Protocol]
    interface MobileRTCActiveShareView
    {
        // -(void)showActiveShareWithUserID:(NSUInteger)userID;
        [Export("showActiveShareWithUserID:")]
        void ShowActiveShareWithUserID(nuint userID);

        // -(void)stopActiveShare;
        [Export("stopActiveShare")]
        void StopActiveShare();

        // -(void)changeShareScaleWithUserID:(NSUInteger)userID;
        [Export("changeShareScaleWithUserID:")]
        void ChangeShareScaleWithUserID(nuint userID);
    }

    // typedef void (^MobileRTCMeetingInviteActionItemBlock)();
    delegate void MobileRTCMeetingInviteActionItemBlock();

    // @interface MobileRTCMeetingInviteActionItem : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCMeetingInviteActionItem
    {
        // @property (readwrite, retain, nonatomic) NSString * _Nonnull actionTitle;
        [Export("actionTitle", ArgumentSemantic.Retain)]
        string ActionTitle { get; set; }

        // @property (readwrite, copy, nonatomic) MobileRTCMeetingInviteActionItemBlock _Nonnull actionHandler;
        [Export("actionHandler", ArgumentSemantic.Copy)]
        MobileRTCMeetingInviteActionItemBlock ActionHandler { get; set; }

        // +(id _Nonnull)itemWithTitle:(NSString * _Nonnull)inTitle Action:(MobileRTCMeetingInviteActionItemBlock _Nonnull)actionHandler;
        [Static]
        [Export("itemWithTitle:Action:")]
        NSObject ItemWithTitle(string inTitle, MobileRTCMeetingInviteActionItemBlock actionHandler);
    }

    // @protocol MobileRTCMeetingShareActionItemDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MobileRTCMeetingShareActionItemDelegate
    {
        // @required -(void)onShareItemClicked:(NSUInteger)tag completion:(BOOL (^ _Nonnull)(UIViewController * _Nonnull))completion;
        [Abstract]
        [Export("onShareItemClicked:completion:")]
        void Completion(nuint tag, Func<UIViewController, bool> completion);
    }

    // @interface MobileRTCMeetingShareActionItem : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCMeetingShareActionItem
    {
        // @property (readwrite, retain, nonatomic) NSString * _Nonnull actionTitle;
        [Export("actionTitle", ArgumentSemantic.Retain)]
        string ActionTitle { get; set; }

        // @property (assign, readwrite, nonatomic) NSUInteger tag;
        [Export("tag")]
        nuint Tag { get; set; }

        [Wrap("WeakDelegate")]
        MobileRTCMeetingShareActionItemDelegate Delegate { get; set; }

        // @property (assign, readwrite, nonatomic) id<MobileRTCMeetingShareActionItemDelegate> _Nonnull delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // +(id _Nonnull)itemWithTitle:(NSString * _Nonnull)inTitle Tag:(NSUInteger)tag;
        [Static]
        [Export("itemWithTitle:Tag:")]
        NSObject ItemWithTitle(string inTitle, nuint tag);
    }

    // @protocol MobileRTCAnnotationServiceDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MobileRTCAnnotationServiceDelegate
    {
        // @optional -(void)onAnnotationService:(MobileRTCAnnotationService * _Nullable)service supportStatusChanged:(BOOL)support;
        [Export("onAnnotationService:supportStatusChanged:")]
        void SupportStatusChanged([NullAllowed] MobileRTCAnnotationService service, bool support);
    }

    // @interface MobileRTCAnnotationService : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCAnnotationService
    {
        [Wrap("WeakDelegate")]
        [NullAllowed]
        MobileRTCAnnotationServiceDelegate Delegate { get; set; }

        // @property (assign, nonatomic) id<MobileRTCAnnotationServiceDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // -(MobileRTCAnnotationError)startAnnotationWithSharedView:(UIView * _Nullable)view;
        [Export("startAnnotationWithSharedView:")]
        MobileRTCAnnotationError StartAnnotationWithSharedView([NullAllowed] UIView view);

        // -(BOOL)stopAnnotation;
        [Export("stopAnnotation")]
        bool StopAnnotation();

        // -(MobileRTCAnnotationError)setToolColor:(UIColor * _Nullable)toolColor;
        [Export("setToolColor:")]
        MobileRTCAnnotationError SetToolColor([NullAllowed] UIColor toolColor);

        // -(UIColor * _Nullable)getToolColor:(MobileRTCAnnoTool)tooltype;
        [Export("getToolColor:")]
        [return: NullAllowed]
        UIColor GetToolColor(MobileRTCAnnoTool tooltype);

        // -(MobileRTCAnnotationError)setToolType:(MobileRTCAnnoTool)type;
        [Export("setToolType:")]
        MobileRTCAnnotationError SetToolType(MobileRTCAnnoTool type);

        // -(MobileRTCAnnotationError)setToolWidth:(NSUInteger)width;
        [Export("setToolWidth:")]
        MobileRTCAnnotationError SetToolWidth(nuint width);

        // -(MobileRTCAnnotationError)clear;
        [Export("clear")]
        MobileRTCAnnotationError Clear();

        // -(MobileRTCAnnotationError)undo;
        [Export("undo")]
        MobileRTCAnnotationError Undo();

        // -(MobileRTCAnnotationError)redo;
        [Export("redo")]
        MobileRTCAnnotationError Redo();

        // -(NSArray * _Nullable)getSupportedToolType;
        [NullAllowed, Export("getSupportedToolType")]
        NSObject[] SupportedToolType { get; }

        // -(BOOL)isPresenter;
        [Export("isPresenter")]
        bool IsPresenter { get; }

        // -(BOOL)canDisableViewerAnnoataion;
        [Export("canDisableViewerAnnoataion")]
        bool CanDisableViewerAnnoataion { get; }

        // -(BOOL)isViewerAnnoataionDisabled;
        [Export("isViewerAnnoataionDisabled")]
        bool IsViewerAnnoataionDisabled { get; }

        // -(MobileRTCAnnotationError)disableViewerAnnoataion:(BOOL)isDisable;
        [Export("disableViewerAnnoataion:")]
        MobileRTCAnnotationError DisableViewerAnnoataion(bool isDisable);

        // -(BOOL)canDoAnnotation;
        [Export("canDoAnnotation")]
        bool CanDoAnnotation { get; }
    }

    // @interface MobileRTCRemoteControlService : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCRemoteControlService
    {
        [Wrap("WeakDelegate")]
        MobileRTCRemoteControlDelegate Delegate { get; set; }

        // @property (assign, nonatomic) id<MobileRTCRemoteControlDelegate> _Nonnull delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // -(BOOL)isRemoteController;
        [Export("isRemoteController")]
        bool IsRemoteController { get; }

        // -(MobileRTCRemoteControlError)grabRemoteControl:(UIView * _Nonnull)remoteShareView;
        [Export("grabRemoteControl:")]
        MobileRTCRemoteControlError GrabRemoteControl(UIView remoteShareView);

        // -(MobileRTCRemoteControlError)remoteControlSingleTap:(CGPoint)point;
        [Export("remoteControlSingleTap:")]
        MobileRTCRemoteControlError RemoteControlSingleTap(CGPoint point);

        // -(MobileRTCRemoteControlError)remoteControlDoubleTap:(CGPoint)point;
        [Export("remoteControlDoubleTap:")]
        MobileRTCRemoteControlError RemoteControlDoubleTap(CGPoint point);

        // -(MobileRTCRemoteControlError)remoteControlLongPress:(CGPoint)point;
        [Export("remoteControlLongPress:")]
        MobileRTCRemoteControlError RemoteControlLongPress(CGPoint point);

        // -(MobileRTCRemoteControlError)remoteControlDoubleScroll:(CGPoint)point;
        [Export("remoteControlDoubleScroll:")]
        MobileRTCRemoteControlError RemoteControlDoubleScroll(CGPoint point);

        // -(MobileRTCRemoteControlError)remoteControlSingleMove:(CGPoint)point;
        [Export("remoteControlSingleMove:")]
        MobileRTCRemoteControlError RemoteControlSingleMove(CGPoint point);

        // -(MobileRTCRemoteControlError)remoteControlMouseLeftDown:(CGPoint)point;
        [Export("remoteControlMouseLeftDown:")]
        MobileRTCRemoteControlError RemoteControlMouseLeftDown(CGPoint point);

        // -(MobileRTCRemoteControlError)remoteControlMouseLeftUp:(CGPoint)point;
        [Export("remoteControlMouseLeftUp:")]
        MobileRTCRemoteControlError RemoteControlMouseLeftUp(CGPoint point);

        // -(MobileRTCRemoteControlError)remoteControlMouseLeftDrag:(CGPoint)point;
        [Export("remoteControlMouseLeftDrag:")]
        MobileRTCRemoteControlError RemoteControlMouseLeftDrag(CGPoint point);

        // -(MobileRTCRemoteControlError)remoteControlCharInput:(NSString * _Nonnull)str;
        [Export("remoteControlCharInput:")]
        MobileRTCRemoteControlError RemoteControlCharInput(string str);

        // -(MobileRTCRemoteControlError)remoteControlKeyInput:(MobileRTCRemoteControlInputType)key;
        [Export("remoteControlKeyInput:")]
        MobileRTCRemoteControlError RemoteControlKeyInput(MobileRTCRemoteControlInputType key);
    }

    // @protocol MobileRTCRemoteControlDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MobileRTCRemoteControlDelegate
    {
        // @optional -(void)remoteControlPrivilegeChanged:(BOOL)isMyControl;
        [Export("remoteControlPrivilegeChanged:")]
        void RemoteControlPrivilegeChanged(bool isMyControl);

        // @optional -(void)startRemoteControlCallBack:(MobileRTCRemoteControlError)resultValue;
        [Export("startRemoteControlCallBack:")]
        void StartRemoteControlCallBack(MobileRTCRemoteControlError resultValue);
    }

    // @protocol MobileRTCWaitingRoomServiceDelegate <NSObject>
    [Protocol, Model(AutoGeneratedName = true)]
    [BaseType(typeof(NSObject))]
    interface MobileRTCWaitingRoomServiceDelegate
    {
        // @optional -(void)onWaitingRoomUserJoin:(NSUInteger)userId;
        [Export("onWaitingRoomUserJoin:")]
        void OnWaitingRoomUserJoin(nuint userId);

        // @optional -(void)onWaitingRoomUserLeft:(NSUInteger)userId;
        [Export("onWaitingRoomUserLeft:")]
        void OnWaitingRoomUserLeft(nuint userId);
    }

    // @interface MobileRTCWaitingRoomService : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCWaitingRoomService
    {
        [Wrap("WeakDelegate")]
        [NullAllowed]
        MobileRTCWaitingRoomServiceDelegate Delegate { get; set; }

        // @property (assign, nonatomic) id<MobileRTCWaitingRoomServiceDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // -(BOOL)isSupportWaitingRoom;
        [Export("isSupportWaitingRoom")]
        bool IsSupportWaitingRoom { get; }

        // -(BOOL)isWaitingRoomOnEntryFlagOn;
        [Export("isWaitingRoomOnEntryFlagOn")]
        bool IsWaitingRoomOnEntryFlagOn { get; }

        // -(MobileRTCMeetError)enableWaitingRoomOnEntry:(BOOL)bEnable;
        [Export("enableWaitingRoomOnEntry:")]
        MobileRTCMeetError EnableWaitingRoomOnEntry(bool bEnable);

        // -(NSArray * _Nullable)waitingRoomList;
        [NullAllowed, Export("waitingRoomList")]
        NSObject[] WaitingRoomList { get; }

        // -(MobileRTCMeetingUserInfo * _Nullable)waitingRoomUserInfoByID:(NSUInteger)userId;
        [Export("waitingRoomUserInfoByID:")]
        [return: NullAllowed]
        MobileRTCMeetingUserInfo WaitingRoomUserInfoByID(nuint userId);

        // -(BOOL)admitToMeeting:(NSUInteger)userId;
        [Export("admitToMeeting:")]
        bool AdmitToMeeting(nuint userId);

        // -(BOOL)putInWaitingRoom:(NSUInteger)userId;
        [Export("putInWaitingRoom:")]
        bool PutInWaitingRoom(nuint userId);
    }

    // @interface MobileRTCRenderer : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCRenderer
    {
        // @property (readonly, assign, nonatomic) NSUInteger userId;
        [Export("userId")]
        nuint UserId { get; }

        // @property (readonly, assign, nonatomic) MobileRTCVideoType videoType;
        [Export("videoType", ArgumentSemantic.Assign)]
        MobileRTCVideoType VideoType { get; }

        // @property (readonly, assign, nonatomic) MobileRTCVideoResolution resolution;
        [Export("resolution", ArgumentSemantic.Assign)]
        MobileRTCVideoResolution Resolution { get; }

        // -(instancetype _Nonnull)initWithDelegate:(id<MobileRTCVideoRawDataDelegate> _Nonnull)delegate;
        [Export("initWithDelegate:")]
        IntPtr Constructor(MobileRTCVideoRawDataDelegate @delegate);

        // -(MobileRTCRawDataError)setRawDataResolution:(MobileRTCVideoResolution)resolution;
        [Export("setRawDataResolution:")]
        MobileRTCRawDataError SetRawDataResolution(MobileRTCVideoResolution resolution);

        // -(MobileRTCRawDataError)subscribe:(NSUInteger)userId videoType:(MobileRTCVideoType)type;
        [Export("subscribe:videoType:")]
        MobileRTCRawDataError Subscribe(nuint userId, MobileRTCVideoType type);

        // -(MobileRTCRawDataError)unSubscribe;
        [Export("unSubscribe")]
        MobileRTCRawDataError UnSubscribe();
    }

    // @interface MobileRTCAudioRawDataHelper : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCAudioRawDataHelper
    {
        // -(instancetype _Nonnull)initWithDelegate:(id<MobileRTCAudioRawDataDelegate> _Nonnull)delegate;
        [Export("initWithDelegate:")]
        IntPtr Constructor(MobileRTCAudioRawDataDelegate @delegate);

        // -(MobileRTCRawDataError)subscribe;
        [Export("subscribe")]
        MobileRTCRawDataError Subscribe();

        // -(MobileRTCRawDataError)unSubscribe;
        [Export("unSubscribe")]
        MobileRTCRawDataError UnSubscribe();
    }

    // @interface MobileRTCRealNameCountryInfo : NSObject
    [Protocol]
    [BaseType(typeof(NSObject))]
    interface MobileRTCRealNameCountryInfo
    {
        // @property (copy, nonatomic) NSString * _Nullable countryId;
        [NullAllowed, Export("countryId")]
        string CountryId { get; set; }

        // @property (copy, nonatomic) NSString * _Nullable countryName;
        [NullAllowed, Export("countryName")]
        string CountryName { get; set; }

        // @property (copy, nonatomic) NSString * _Nullable countryCode;
        [NullAllowed, Export("countryCode")]
        string CountryCode { get; set; }
    }

    // @interface MobileRTCRetrieveSMSHandler : NSObject
    [Protocol]
    [BaseType(typeof(NSObject))]
    interface MobileRTCRetrieveSMSHandler
    {
        // -(BOOL)retrieve:(NSString * _Nullable)countryCode andPhoneNumber:(NSString * _Nullable)phoneNum;
        [Export("retrieve:andPhoneNumber:")]
        bool Retrieve([NullAllowed] string countryCode, [NullAllowed] string phoneNum);

        // -(BOOL)cancelAndLeaveMeeting;
        [Export("cancelAndLeaveMeeting")]
        bool CancelAndLeaveMeeting();
    }

    // @interface MobileRTCVerifySMSHandler : NSObject
    [Protocol]
    [BaseType(typeof(NSObject))]
    interface MobileRTCVerifySMSHandler
    {
        // -(BOOL)verify:(NSString * _Nullable)countryCode phoneNumber:(NSString * _Nullable)phoneNum andVerifyCode:(NSString * _Nullable)verifyCode;
        [Export("verify:phoneNumber:andVerifyCode:")]
        bool Verify([NullAllowed] string countryCode, [NullAllowed] string phoneNum, [NullAllowed] string verifyCode);

        // -(BOOL)cancelAndLeaveMeeting;
        [Export("cancelAndLeaveMeeting")]
        bool CancelAndLeaveMeeting();
    }

    // @interface MobileRTCSMSService : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCSMSService
    {
        [Wrap("WeakDelegate")]
        [NullAllowed]
        MobileRTCSMSServiceDelegate Delegate { get; set; }

        // @property (assign, nonatomic) id<MobileRTCSMSServiceDelegate> _Nullable delegate;
        [NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
        NSObject WeakDelegate { get; set; }

        // -(void)enableZoomAuthRealNameMeetingUIShown:(_Bool)enable;
        [Export("enableZoomAuthRealNameMeetingUIShown:")]
        void EnableZoomAuthRealNameMeetingUIShown(bool enable);

        // -(MobileRTCRetrieveSMSHandler * _Nullable)getResendSMSVerificationCodeHandler;
        [NullAllowed, Export("getResendSMSVerificationCodeHandler")]
        MobileRTCRetrieveSMSHandler ResendSMSVerificationCodeHandler();

        // -(MobileRTCVerifySMSHandler * _Nullable)getReVerifySMSVerificationCodeHandler;
        [NullAllowed, Export("getReVerifySMSVerificationCodeHandler")]
        MobileRTCVerifySMSHandler ReVerifySMSVerificationCodeHandler();

        // -(NSArray * _Nullable)getSupportPhoneNumberCountryList;
        [NullAllowed, Export("getSupportPhoneNumberCountryList")]
        NSObject[] SupportPhoneNumberCountryList { get; }

        // -(BOOL)setDefaultCellPhoneInfo:(NSString * _Nullable)countryCode phoneNum:(NSString * _Nullable)phoneNum;
        [Export("setDefaultCellPhoneInfo:phoneNum:")]
        bool SetDefaultCellPhoneInfo([NullAllowed] string countryCode, [NullAllowed] string phoneNum);
    }

    // @interface MobileRTCSDKInitContext : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTCSDKInitContext
    {
        // @property (copy, nonatomic) NSString * _Nullable domain;
        [NullAllowed, Export("domain")]
        string Domain { get; set; }

        // @property (assign, nonatomic) BOOL enableLog;
        [Export("enableLog")]
        bool EnableLog { get; set; }

        // @property (copy, nonatomic) NSString * _Nullable bundleResPath;
        [NullAllowed, Export("bundleResPath")]
        string BundleResPath { get; set; }

        // @property (assign, nonatomic) MobileRTC_ZoomLocale locale;
        [Export("locale", ArgumentSemantic.Assign)]
        MobileRTC_ZoomLocale Locale { get; set; }

        // @property (assign, nonatomic) MobileRTCRawDataMemoryMode videoRawdataMemoryMode;
        [Export("videoRawdataMemoryMode", ArgumentSemantic.Assign)]
        MobileRTCRawDataMemoryMode VideoRawdataMemoryMode { get; set; }

        // @property (assign, nonatomic) MobileRTCRawDataMemoryMode shareRawdataMemoryMode;
        [Export("shareRawdataMemoryMode", ArgumentSemantic.Assign)]
        MobileRTCRawDataMemoryMode ShareRawdataMemoryMode { get; set; }

        // @property (assign, nonatomic) MobileRTCRawDataMemoryMode audioRawdataMemoryMode;
        [Export("audioRawdataMemoryMode", ArgumentSemantic.Assign)]
        MobileRTCRawDataMemoryMode AudioRawdataMemoryMode { get; set; }

        // @property (copy, nonatomic) NSString * _Nullable appGroupId;
        [NullAllowed, Export("appGroupId")]
        string AppGroupId { get; set; }
    }

    // @interface MobileRTC : NSObject
    [BaseType(typeof(NSObject))]
    [Protocol]
    interface MobileRTC
    {
        // @property (readonly, retain, nonatomic) NSString * _Nullable mobileRTCDomain;
        [NullAllowed, Export("mobileRTCDomain", ArgumentSemantic.Retain)]
        string MobileRTCDomain { get; }

        // @property (readonly, retain, nonatomic) NSString * _Nullable mobileRTCResPath;
        [NullAllowed, Export("mobileRTCResPath", ArgumentSemantic.Retain)]
        string MobileRTCResPath { get; }

        // @property (readonly, retain, nonatomic) NSString * _Nullable mobileRTCCustomLocalizableName;
        [NullAllowed, Export("mobileRTCCustomLocalizableName", ArgumentSemantic.Retain)]
        string MobileRTCCustomLocalizableName { get; }

        // +(MobileRTC * _Nonnull)sharedRTC;
        [Static]
        [Export("sharedRTC")]
        MobileRTC SharedRTC { get; }

        // -(BOOL)initialize:(MobileRTCSDKInitContext * _Nonnull)context;
        [Export("initialize:")]
        bool Initialize(MobileRTCSDKInitContext context);

        // -(BOOL)switchDomain:(NSString * _Nonnull)newDomain force:(BOOL)force;
        [Export("switchDomain:force:")]
        bool SwitchDomain(string newDomain, bool force);

        // +(void)initializeWithDomain:(NSString * _Nonnull)domain enableLog:(BOOL)enableLog __attribute__((deprecated("Will be deleted in the next release. Please use [[MobileRTC sharedRTC] initialize:context] instead")));
        [Static]
        [Export("initializeWithDomain:enableLog:")]
        void InitializeWithDomain(string domain, bool enableLog);

        // +(void)initializeWithDomain:(NSString * _Nonnull)domain enableLog:(BOOL)enableLog bundleResPath:(NSString * _Nullable)bundleResPath __attribute__((deprecated("Will be deleted in the next release. Please use [[MobileRTC sharedRTC] initialize:context] instead")));
        [Static]
        [Export("initializeWithDomain:enableLog:bundleResPath:")]
        void InitializeWithDomain(string domain, bool enableLog, [NullAllowed] string bundleResPath);

        // -(void)setMobileRTCDomain:(NSString * _Nonnull)domain __attribute__((deprecated("Will be deleted in the next release. Please use [[MobileRTC sharedRTC] initialize:context] instead")));
        [Export("setMobileRTCDomain:")]
        void SetMobileRTCDomain(string domain);

        // -(void)setMobileRTCResPath:(NSString * _Nullable)path __attribute__((deprecated("Will be deleted in the next release. Please use [[MobileRTC sharedRTC] initialize:context] instead")));
        [Export("setMobileRTCResPath:")]
        void SetMobileRTCResPath([NullAllowed] string path);

        // -(void)setMobileRTCCustomLocalizableName:(NSString * _Nullable)localizableName;
        [Export("setMobileRTCCustomLocalizableName:")]
        void SetMobileRTCCustomLocalizableName([NullAllowed] string localizableName);

        // -(UINavigationController * _Nullable)mobileRTCRootController;
        // -(void)setMobileRTCRootController:(UINavigationController * _Nullable)navController;
        [NullAllowed, Export("mobileRTCRootController")]
        UINavigationController MobileRTCRootController { get; set; }

        // -(NSString * _Nullable)mobileRTCVersion;
        [Export("mobileRTCVersion")]
        [return: NullAllowed]
        string MobileRTCVersion();

        // -(BOOL)isRTCAuthorized;
        [Export("isRTCAuthorized")]
        bool IsRTCAuthorized();

        // -(BOOL)isSupportedCustomizeMeetingUI;
        [Export("isSupportedCustomizeMeetingUI")]
        bool IsSupportedCustomizeMeetingUI();

        // -(MobileRTCAuthService * _Nullable)getAuthService;
        [Export("getAuthService")]
        [return: NullAllowed]
        MobileRTCAuthService GetAuthService();

        // -(MobileRTCPremeetingService * _Nullable)getPreMeetingService;
        [Export("getPreMeetingService")]
        [return: NullAllowed]
        MobileRTCPremeetingService GetPreMeetingService();

        // -(MobileRTCMeetingService * _Nullable)getMeetingService;
        [Export("getMeetingService")]
        [return: NullAllowed]
        MobileRTCMeetingService GetMeetingService();

        // -(MobileRTCMeetingSettings * _Nullable)getMeetingSettings;
        [Export("getMeetingSettings")]
        [return: NullAllowed]
        MobileRTCMeetingSettings GetMeetingSettings();

        // -(MobileRTCAnnotationService * _Nullable)getAnnotationService;
        [Export("getAnnotationService")]
        [return: NullAllowed]
        MobileRTCAnnotationService GetAnnotationService();

        // -(MobileRTCRemoteControlService * _Nullable)getRemoteControlService;
        [Export("getRemoteControlService")]
        [return: NullAllowed]
        MobileRTCRemoteControlService GetRemoteControlService();

        // -(MobileRTCWaitingRoomService * _Nullable)getWaitingRoomService;
        [Export("getWaitingRoomService")]
        [return: NullAllowed]
        MobileRTCWaitingRoomService GetWaitingRoomService();

        // -(MobileRTCSMSService * _Nullable)getSMSService;
        [Export("getSMSService")]
        [return: NullAllowed]
        MobileRTCSMSService GetSMSService();

        // -(NSArray * _Nonnull)supportedLanguages;
        [Export("supportedLanguages")]
        NSObject[] SupportedLanguages();

        // -(void)setLanguage:(NSString * _Nullable)lang;
        [Export("setLanguage:")]
        void SetLanguage([NullAllowed] string lang);

        // -(void)setAppGroupsName:(NSString * _Nullable)appGroupId __attribute__((deprecated("Will be deleted in the next release. Please use [[MobileRTC sharedRTC] initialize:context] instead")));
        [Export("setAppGroupsName:")]
        void SetAppGroupsName([NullAllowed] string appGroupId);

        // -(void)appWillResignActive;
        [Export("appWillResignActive")]
        void AppWillResignActive();

        // -(void)appDidBecomeActive;
        [Export("appDidBecomeActive")]
        void AppDidBecomeActive();

        // -(void)appDidEnterBackgroud;
        [Export("appDidEnterBackgroud")]
        void AppDidEnterBackgroud();

        // -(void)appWillTerminate;
        [Export("appWillTerminate")]
        void AppWillTerminate();

        // -(BOOL)hasRawDataLicense;
        [Export("hasRawDataLicense")]
        bool HasRawDataLicense();
    }
}