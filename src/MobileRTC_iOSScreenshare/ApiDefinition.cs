using CoreMedia;
using Foundation;
using ObjCRuntime;
using ReplayKit;


namespace ZoomiosScreenShare
{
	// @protocol MobileRTCScreenShareServiceDelegate <NSObject>
	//[Protocol, Model(AutoGeneratedName = true)]
	[Protocol]
	[BaseType(typeof(NSObject))]
	interface MobileRTCScreenShareServiceDelegate
	{
		// @required -(void)MobileRTCScreenShareServiceFinishBroadcastWithError:(NSError *)error;
		[Abstract]
		[Export("MobileRTCScreenShareServiceFinishBroadcastWithError:")]
		void MobileRTCScreenShareServiceFinishBroadcastWithError(NSError error);
	}

	// @interface MobileRTCScreenShareService : NSObject
	[BaseType(typeof(NSObject))]
	interface MobileRTCScreenShareService
	{
		[Wrap("WeakDelegate")]
		MobileRTCScreenShareServiceDelegate Delegate { get; set; }

		// @property (assign, nonatomic) id<MobileRTCScreenShareServiceDelegate> delegate;
		[NullAllowed, Export("delegate", ArgumentSemantic.Assign)]
		NSObject WeakDelegate { get; set; }

		// @property (retain, nonatomic) NSString * appGroup;
		[Export("appGroup", ArgumentSemantic.Retain)]
		string AppGroup { get; set; }

		// -(void)broadcastStartedWithSetupInfo:(NSDictionary<NSString *,NSObject *> *)setupInfo;
		[Export("broadcastStartedWithSetupInfo:")]
		void BroadcastStartedWithSetupInfo(NSDictionary<NSString, NSObject> setupInfo);

		// -(void)broadcastPaused;
		[Export("broadcastPaused")]
		void BroadcastPaused();

		// -(void)broadcastResumed;
		[Export("broadcastResumed")]
		void BroadcastResumed();

		// -(void)broadcastFinished;
		[Export("broadcastFinished")]
		void BroadcastFinished();

		// -(void)processSampleBuffer:(CMSampleBufferRef)sampleBuffer withType:(RPSampleBufferType)sampleBufferType;
		[Export("processSampleBuffer:withType:")]
		unsafe void ProcessSampleBuffer(CMSampleBuffer sampleBuffer, RPSampleBufferType sampleBufferType);
	}
}